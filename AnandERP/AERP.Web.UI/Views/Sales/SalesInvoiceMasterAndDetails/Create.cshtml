@model AERP.ViewModel.SalesInvoiceMasterAndDetailsViewModel
<script src="@Url.Content("~/Scripts/AERP_Scripts/Sales/SalesInvoiceMasterAndDetails.js")" type="text/javascript"></script>
<style>
    .closeDM {
        font-size: 10px;
        font-weight: bold;
        line-height: 1.2;
        color: #000000;
        text-shadow: 0 1px 0 #ffffff;
        opacity: 0.2;
        filter: alpha(opacity=20);
        opacity: 0.5;
        filter: alpha(opacity=50);
        /*font-weight: normal;*/
        text-shadow: none;
        padding: 0;
        cursor: pointer;
        background: transparent;
        border: 0;
        margin-left: 5px;
        vertical-align: top;
    }
</style>


<div id="custom-content">

    @Html.HiddenFor(model => model.SalesOrderMasterID)

    <div class="block-header">
        <h2>&nbsp;<i class="zmdi zmdi-view-toc"></i>&nbsp;Sales Invoice</h2>
    </div>
    <div class="card">
        <div class="card-body card-padding">
            <div id="displayErrorMessage" role="alert" hidden class="alert">
                <button class="close" type="button"><span aria-hidden="true">×</span></button>
                <p id="messageContent"></p>
            </div>
            <form id="FormCreateSalesInvoiceMasterAndDetails" role="form">
                @Html.HiddenFor(m => m.StorageLocationID)
                @Html.HiddenFor(m => m.GeneralUnitsID)
                @Html.HiddenFor(m => m.CustomerBranchMasterID)
                @Html.Hidden("IsTaxExempted",(Model.SalesinvoiceList[0].IsTaxExempted == true && Model.SalesinvoiceList[0].ReasonForExemption == 1 ? "true":"false"))
                <div class="row">
                    <div class="col-sm-6" style="display:none">
                        <div class="form-group fg-line">
                            @Html.LabelFor(model => model.CustomerInvoiceNumber, new { })
                            @Html.TextBoxFor(model => model.CustomerInvoiceNumber, new { maxlength = "80", @class = "form-control input-sm typeahead" })
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-group fg-line">
                            @Html.HiddenFor(m => m.CustomerMasterID)
                            @Html.LabelFor(model => model.CustomerName, new { })
                            @Html.TextBoxFor(model => model.CustomerName, new { maxlength = "100", @class = "form-control input-sm typeahead" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-12">
                    <div class="form-group fg-line">
                        <br />
                    </div>
                </div>

                <h4>Item Details</h4>
                <div id="ServiceItemDetails">
                    <div class="row">
                        <div class="col-sm-4">
                            <div class="form-group fg-line">
                                @Html.HiddenFor(model => model.ItemNumber)
                                @*@Html.HiddenFor(model => model.Rate)*@
                                @Html.HiddenFor(model => model.TaxRate)
                                @Html.HiddenFor(model => model.GenTaxGroupMasterID)
                                @Html.HiddenFor(model => model.SerialAndBatchManagedBy)
                                @Html.HiddenFor(model => model.TaxRateList)
                                @Html.HiddenFor(model => model.TaxList)
                                @Html.HiddenFor(model => model.SerialAndBatchManagedBy)
                                @Html.LabelFor(model => model.ItemDescription, new { })
                                @Html.TextBoxFor(model => model.ItemDescription, new { @class = "form-control input-sm typeahead" })
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group fg-line">
                                @Html.LabelFor(model => model.BillingDispalyName, new { })
                                @Html.TextBoxFor(model => model.BillingDispalyName, new { @class = "form-control input-sm typeahead" })
                            </div>
                        </div>
                        <div class="col-sm-2" id="Units">
                            <div class="form-group fg-line">
                                @Html.LabelFor(model => model.SaleUomCode, new { })
                                @Html.DropDownListFor(model => model.SaleUomCode, Enumerable.Empty<SelectListItem>(), "---Select---", new { @class = "form-control input-sm", data_val = "true", data_toggle = "tooltip", data_placement = "top", data_original_title = "" })
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="form-group fg-line">
                                @Html.LabelFor(model => model.DisplayUOMCode, new { })
                                @Html.TextBoxFor(model => model.DisplayUOMCode, new { @class = "form-control input-sm typeahead" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-2">
                            <div class="form-group fg-line">
                                @Html.LabelFor(model => model.InvoiceQuantity, new { })
                                @Html.TextBoxFor(model => model.InvoiceQuantity, new { maxlength = "8", @class = "form-control input-sm typeahead" })
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="form-group fg-line">
                                @Html.LabelFor(model => model.Rate, new { })
                                @Html.TextBoxFor(model => model.Rate, new { maxlength = "8", @class = "form-control input-sm typeahead" })
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="form-group fg-line">
                                @Html.LabelFor(model => model.DisplayRate, new { })
                                @Html.TextBoxFor(model => model.DisplayRate, new { maxlength = "8", @class = "form-control input-sm typeahead" })
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="form-group fg-line">
                                @Html.LabelFor(model => model.BatchNumber, new { })
                                @Html.TextBoxFor(model => model.BatchNumber, new { @class = "form-control input-sm typeahead typeahead1" })
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="form-group fg-line">
                                @Html.LabelFor(model => model.ExpiryDate, new { })
                                @Html.TextBoxFor(model => model.ExpiryDate, new { @class = "form-control input-sm typeahead", disabled = "disabled" })
                            </div>
                        </div>

                        <div class="col-sm-2" id="btnAdd1">
                            <!-- <button type="button" class="btn btn-primary" id="btnAdd">Add Row</button> -->
                            <button type="button" title="Add row" class="btn bgm-green btn-float waves-effect waves-circle waves-float" id="btnAddCreateInvoiceService" style="margin-top:10px"><i class="zmdi zmdi-plus"></i></button>
                        </div>
                    </div>
                </div>
                <table id="myDataTableCreate" class="table">
                    <thead>
                        <tr>
                            <th>Item Name</th>
                            <th>Billing Dispaly Name</th>
                            <th>Quantity</th>
                            <th>UOM Code</th>
                            <th>Display UOM</th>
                            <th>Convertion</th>
                            <th>Rate</th>
                            <th>Display Rate</th>
                            <th>Location</th>
                            @*<th>Batch Number</th>
                                <th>Expiry Date</th>*@
                            @*<th>Expected Delivery Date</th>*@
                            <th>Tax Name</th>
                            <th>Amount</th>
                            <th></th>
                        </tr>
                    </thead>
                    @if (Model.SalesinvoiceList.Count > 0)
                    {
                        decimal TotalAmount = 0;

                        <tbody>
                            @foreach (var item in Model.SalesinvoiceList)
                            {
                                String[] TaxList = Model.SalesinvoiceList[0].TaxList.Replace(", ", ",").Split(new char[] { ',' });
                                String[] TaxAmountList = Model.SalesinvoiceList[0].TaxAmountList.Replace(", ", ",").Split(new char[] { ',' });
                                <tr>
                                    <td>@item.ItemDescription</td>
                                    <td>@item.ItemDescription</td>
                                    <td>@Math.Round(@item.Quantity, 3)</td>
                                    <td>@item.SaleUomCode</td>
                                    <td>@item.SaleUomCode</td>
                                    <td> @Math.Round(@item.BaseUOMQuantity, 2)  @item.BaseUOMCode</td>
                                    <td>@Math.Round(@item.Rate, 2)</td>
                                    <td>@Math.Round(@item.Rate, 2)</td>
                                    <td>@item.LocationName</td>
                                    @*<td>@item.BatchNumber</td>
                                        <td>@item.ExpiryDate</td>*@
                                    @*<td>@item.ExpectedDeliveryDate</td>*@
                                    <td>@item.TaxGroupName</td>
                                    <td>@Math.Round((@item.Rate * @item.Quantity), 3)<input type="hidden" id="TaxAbleAmount" value="@Math.Round((@item.Rate * @item.Quantity), 3)"></td>
                                    <td style="display:none">@(item.IsTaxExempted == true && item.ReasonForExemption == 1 ? 0 : item.TaxAmount)<input type="hidden" id="TaxAmount" value="@(item.IsTaxExempted == true && item.ReasonForExemption == 1 ? 0 : item.TaxAmount)"></td>
                                    <td style="display:none"><input type='hidden' style='display:none' class='AddedDeliveryMemoID' value=@item.DMNumber></td>
                                    <td style="display:none" id="TaxRateList">
                                        @for (int i = 0; i < TaxAmountList.Count(); i++)
                                        {
                                            String[] TaxListName = TaxList[i].Split(new char[] { ' ' });
                                            <input type="hidden" style="display:none" value="@(item.IsTaxExempted == true&& item.ReasonForExemption == 1 ? "0" : TaxAmountList[i])" class="@TaxListName[0]">
                                        }
                                    </td>
                                    <td></td>
                                </tr>
                                Model.Amount = @Math.Round(Model.Amount + (item.Rate * item.Quantity), 2);
                                TotalAmount = @Math.Round(TotalAmount + (item.Rate * item.Quantity), 2);
                                Model.Amount = TotalAmount;
                                Model.Freight = @Math.Round(item.Freight, 2);
                                Model.TotalTaxAmount = (item.IsTaxExempted == true && item.ReasonForExemption == 1 ? 0 : @Math.Round(item.TotalTaxAmount, 2));
                                Model.Discount = @Math.Round(item.Discount, 2);
                                Model.ShippingHandling = @Math.Round(item.ShippingHandling, 2);
                            }
                        </tbody>
                        <tfoot>
                            <tr>

                                <td colspan="10" style="text-align: right;">Total</td>
                                <td><span>@TotalAmount</span><input type="hidden" id="Amount" value="@TotalAmount"></td>
                            </tr>
                        </tfoot>
                    }
                </table>

                <div id="DMNumber">
                    @if (Model.SalesinvoiceList != null)
                    {
                        String[] DeliveryNumber = Model.SalesinvoiceList[0].DeliveryNumber.Replace(", ", ",").Split(new char[] { ',' });
                        for (int i = 0; i < DeliveryNumber.Count(); i++)
                        {

                            <span style="border: 1px #e1eaf2 solid;padding: 5px;margin: 5px;display: inline-block;"> @DeliveryNumber[i]&nbsp;&nbsp;&nbsp;&nbsp;<input type="hidden" style="display:none" value="@DeliveryNumber[i]"><button class="closeDM" type="button"><span aria-hidden="true">x</span></button></span>
                        }
                    }

                </div>

                @*<div class="col-sm-6">
                        <div class="form-group fg-line">


                        </div>
                    </div>*@
                <div class="col-sm-3">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.Freight, new { })
                        @Html.TextBoxFor(model => model.Freight, new { maxlength = "80", @class = "form-control input-sm typeahead", disabled = "disabled" })
                    </div>
                </div>

                <div class="col-sm-3">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.TotalTaxAmount, new { })
                        @Html.TextBoxFor(model => model.TotalTaxAmount, new { maxlength = "12", @class = "form-control input-sm typeahead", disabled = "disabled" })
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.Discount, new { })
                        @Html.TextBoxFor(model => model.Discount, new { maxlength = "80", @class = "form-control input-sm typeahead", disabled = "disabled" })
                    </div>
                </div>

                <div class="col-sm-3">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.ShippingHandling, new { })
                        @Html.TextBoxFor(model => model.ShippingHandling, new { maxlength = "12", @class = "form-control input-sm typeahead", disabled = "disabled" })
                    </div>
                </div>
                <div class="col-sm-3" style="display:none">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.BillAmount, new { })
                        @Html.TextBoxFor(model => model.BillAmount, new { maxlength = "12", @class = "form-control input-sm typeahead", disabled = "disabled" })
                    </div>
                </div>
                <div id="DivAddRowTable1">
                    <form id="FormCreateSalesInvoiceMasterAndDetails">
                        <table class="table table-responsive " id="myDataTable1">
                            <thead>
                                <tr></tr>
                            </thead>
                            <tbody id="tbodyID">
                                <tr>
                                    <td style="display: none;"><input type="hidden" name="TotalTaxAmount" id="" value="@Model.TotalTaxAmount" /></td>
                                    <td style="display: none;"><input type="hidden" name="Total" id="" value="@Model.Amount" /></td>
                                    @Html.HiddenFor(m => m.CreatedBy)
                                    @Html.HiddenFor(model => model.CustomerMasterID)
                                    <input type="hidden" name="TotalDiscount" id="TotalDiscount" value="@Model.Discount" />
                                    @Html.HiddenFor(m => m.SalesOrderNumber)
                                </tr>
                            </tbody>
                        </table>
                    </form>
                </div>


                @*@{ Html.RenderAction("GetTaxSummaryForDisplay", "GeneralTaxGroupMaster", new { IsOtherState = Model.IsOtherState, FromMasterID = Model.SalesOrderMasterID, FromDetailTable = "SalesOrderInvoiceDetails" }); }*@
                <div class="form-group" style="margin-left:2%;">
                    <input class="btn btn-primary btn-sm m-t-10 waves-effect" value="@Resources.ButtonAction_Submit" id="CreateSalesInvoiceMasterAndDetailsRecord" type="button" />
                </div>

            </form>
        </div>
    </div>
</div>

<script src="@Url.Content("~/Scripts/jquery.validate.js") " type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")" type="text/javascript"></script>
<script src="~/Content/Theme/vendors/bower_components/typeahead.js/dist/typeahead.jquery.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        SalesInvoiceMasterAndDetails.Initialize();
        $(".closeDM").unbind("click").click(function () {
            var DeliveryMemoID = $(this).prev('input').val();
            $("#myDataTableCreate tbody tr td .AddedDeliveryMemoID").each(function () {
                if ((DeliveryMemoID) == ($(this).val())) {
                    var TotalTaxAmount = $("#TotalTaxAmount").val();
                    var TotalNetAmount = $("#Amount").val();

                    var TaxAmount = $(this).parent().prev().text();
                    var NetAmount = $(this).parent().prev().prev().text();

                    TotalTaxAmount = parseFloat(TotalTaxAmount) - parseFloat(TaxAmount);
                    TotalNetAmount = parseFloat(TotalNetAmount) - parseFloat(NetAmount);

                    $("#TotalTaxAmount").val(parseFloat(TotalTaxAmount).toFixed(2));
                    $("#Amount").val(parseFloat(TotalNetAmount).toFixed(2));
                    $("#Amount").prev('span').text(parseFloat(TotalNetAmount).toFixed(2));

                    $(this).parent().parent('tr').remove();
                }
            });
            $(this).parent('span').remove();
        })

        map = [];
        var getData = function () {
            return function findMatches(q, cb) {

                var matches, substringRegex;

                // an array that will be populated with substring matches
                matches = [];

                // regex used to determine if a string contains the substring `q`
                substrRegex = new RegExp(q, 'i');
                IsServiceItem = "true";


                $.ajax({
                    url: "/SalesQuotationMasterAndDetails/GetItemNumberSearchList",
                    type: "POST",
                    data: { term: q, CustomerMasterID: $("#CustomerMasterID").val(), CustomerBranchMasterID: $("#CustomerBranchMasterID").val(), GeneralUnitsID: $("#GeneralUnitsID").val(), IsServiceItem: IsServiceItem },
                    dataType: "json",
                    success: function (data) {

                        // iterate through the pool of strings and for any string that
                        // contains the substring `q`, add it to the `matches` array
                        //alert(data);
                        //console.log(data);
                        //debugger;
                        $.each(data, function (i, response) {

                            if (substrRegex.test(response.ItemDescription)) {
                                map[response.ItemDescription] = response;
                                matches.push(response.ItemDescription);

                            }

                        });

                    },
                    async: false
                })
                cb(matches);
            };

        };

        $("#ItemDescription").typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        }, {
            source: getData()
        }).on("typeahead:selected", function (obj, item) {
            $("#ItemNumber").val(map[item].ItemNumber);
            $("#ItemDescription").val(map[item].ItemDescription);
            $("#GenTaxGroupMasterID").val(map[item].GeneralTaxGroupMasterID);
            $("#TaxRate").val(map[item].TaxRate);
            $("#SerialAndBatchManagedBy").val(parseFloat(map[item].SerialAndBatchManagedBy));
            debugger;
            if ($('#SerialAndBatchManagedBy').val() == 2) {
                $('#BatchNumber').val('')
                $('#BatchNumber').attr("disabled", false);
            }
            else {
                $('#BatchNumber').val('')
                $('#BatchNumber').attr("disabled", true);
            }
            $("#TaxRateList").val(map[item].TaxRateList);
            $("#TaxList").val(map[item].TaxList);

            $.ajax({
                cache: false,
                type: "POST",
                dataType: "json",
                data: { "ItemNumber": map[item].ItemNumber },
                url: '/SalesEnquiryMasterAndDetails/GetUoMCodeByItemNumber',
                success: function (data) {
                    var $ddlExam = $("#SaleUomCode");
                    $ddlExam.html('');
                    $ddlExam.append('<option value="">------Select UoM Code-----</option>');
                    if (data.length != 0) {
                        $.each(data, function (id, option) {
                            $ddlExam.append($('<option></option>').val(option.name).html(option.name));

                        });
                    }
                    else {
                        // $ddlExam.append('<option value="EA">EA</option>');
                    }
                }
            });
        });
    });
</script>

