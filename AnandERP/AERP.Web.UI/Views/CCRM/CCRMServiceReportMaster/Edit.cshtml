
@model AERP.ViewModel.CCRMServiceReportMasterViewModel

<style>
    .mfp-close-btn-in .mfp-close {
        color: #eee;
    }
</style>
<div class="mfp-content" style="background :#bfc6ca;width: 902px;margin: -10px 0px -10px -10px;">
    <div id="custom-content">
        <div class="block-header">
            <h2 style="background :#607d8b;color:white;margin-top: -10px;line-height: 2.5;width: 902px;margin-left: -10px;">&nbsp;<i class="zmdi zmdi-view-toc"></i>&nbsp;Service Report Master</h2>
        </div>
        <div class="card">
            <div class="card-body card-padding" style="background:white;margin-top:-25px;margin-left: -10px;width: 902px;">
                <div id="displayErrorMessage" role="alert" hidden class="alert">
                    <button class="close" type="button"><span aria-hidden="true">×</span></button>
                    <p id="messageContent"></p>
                </div>
                <form id="FormEditCCRMServiceReportMaster">

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)
                    @Html.ValidationSummary(true)
                    @Html.HiddenFor(model => model.ID)





                    <div class="col-sm-12">
                        <div class="col-sm-4">
                            <span style="color:red">*</span> @Html.LabelFor(model => model.CallTktNo, new { style = "" })
                            <div class="form-group  fg-line">
                                @Html.TextBoxFor(model => model.CallTktNo, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;", disabled = "disabled" })
                            </div>
                            @Html.ValidationMessageFor(model => model.CallTktNo)
                        </div>

                        <div class="col-sm-4">
                            <span style="color:red">*</span> @Html.LabelFor(model => model.CallDate, new { style = "" })
                            <div class="form-group  fg-line">
                                @Html.TextBoxFor(model => model.CallDate, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;", disabled = "disabled" })
                            </div>
                            @Html.ValidationMessageFor(model => model.CallDate)
                        </div>
                        <div class="col-sm-4">
                            <span style="color:red">*</span> @Html.LabelFor(model => model.MIFName, new { style = "" })
                            <div class="form-group  fg-line">
                                @Html.TextBoxFor(model => model.MIFName, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;", disabled = "disabled" })
                            </div>
                            @Html.ValidationMessageFor(model => model.MIFName)
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="col-sm-4">
                            @Html.HiddenFor(model => model.EngineerID)
                            @Html.LabelFor(model => model.EnggName, new { })
                            <div class="form-group fg-line ">
                                @Html.DropDownListFor(model => model.EnggName, (SelectList)ViewBag.EmpEmployeeMasterList,  new { @class = "form-control input-sm" })
                            </div>
                        </div>
                        @*<div class="col-sm-4">
                            @Html.HiddenFor(model => model.EngineerID)
                            @Html.LabelFor(model => model.EnggName, new { style = "" })
                            <div class="form-group  fg-line">
                                @Html.TextBoxFor(model => model.EnggName, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;", disabled = "disabled" })
                            </div>
                            @Html.ValidationMessageFor(model => model.EnggName)
                        </div>*@
                        <div class="col-sm-4">
                            @Html.HiddenFor(model => model.ModelNo)
                            @Html.LabelFor(model => model.ModelNo, new { style = "" })
                            <div class="form-group  fg-line">
                                @Html.TextBoxFor(model => model.ItemDescription, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;", disabled = "disabled" })
                            </div>
                            @Html.ValidationMessageFor(model => model.ItemDescription)
                        </div>
                        <div class="col-sm-4">
                            @Html.LabelFor(model => model.SerialNo, new { style = "" })
                            <div class="form-group  fg-line">
                                @Html.TextBoxFor(model => model.SerialNo, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;", disabled = "disabled" })
                            </div>
                            @Html.ValidationMessageFor(model => model.SerialNo)
                        </div>
                    </div>
                    <div class="col-sm-12">

                        <div class="col-sm-6">
                            @Html.HiddenFor(model => model.ContractTypeID)
                            @Html.LabelFor(model => model.ContractCode, new { style = "" })
                            <div class="form-group  fg-line">
                                @Html.TextBoxFor(model => model.ContractCode, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;", disabled = "disabled" })
                            </div>
                            @Html.ValidationMessageFor(model => model.ContractCode)
                        </div>
                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.SymptomCode, new { style = "" })
                            <div class="form-group  fg-line">
                                @Html.TextBoxFor(model => model.SymptomTitle, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;", disabled = "disabled" })
                            </div>
                            @Html.ValidationMessageFor(model => model.SymptomTitle)
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.ComPlaint, new { style = "" })
                            <div class="form-group  fg-line">
                                @Html.TextBoxFor(model => model.ComPlaint, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;", disabled = "disabled" })
                            </div>
                            @Html.ValidationMessageFor(model => model.ComPlaint)
                        </div>
                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.CallerName, new { style = "" })
                            <div class="form-group  fg-line">
                                @Html.TextBoxFor(model => model.CallerName, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;", disabled = "disabled" })
                            </div>
                            @Html.ValidationMessageFor(model => model.CallerName)
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.AllotDate, new { style = "" })
                            <div class="form-group  fg-line">
                                @Html.TextBoxFor(model => model.AllotDate, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;", disabled = "disabled" })
                            </div>
                            @Html.ValidationMessageFor(model => model.AllotDate)
                        </div>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.AllotPeriod, new { style = "" })
                            <div class="form-group  fg-line">
                                @Html.TextBoxFor(model => model.AllotPeriod, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;", disabled = "disabled" })
                            </div>
                            @Html.ValidationMessageFor(model => model.AllotPeriod)
                        </div>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.ArrivalDate, new { style = "" })
                            <div class="form-group fg-line dtp-container">
                                @Html.TextBoxFor(model => model.ArrivalDate, new { @class = "form-control", style = "background-color:#fff" })
                            </div>
                        </div>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.ArrivalPeriod, new { style = "" })
                            <div class="form-group  fg-line">
                                @Html.TextBoxFor(model => model.ArrivalPeriod, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;", disabled = "disabled" })
                            </div>
                            @Html.ValidationMessageFor(model => model.ArrivalPeriod)
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.JobstartDate, new { style = "" })
                            <div class="form-group fg-line dtp-container">
                                @Html.TextBoxFor(model => model.JobstartDate, new { @class = "form-control", style = "background-color:#fff" })
                            </div>
                        </div>
                        <div class="col-sm-3 ">
                            @Html.LabelFor(model => model.JobEndDate, new { style = "" })
                            <div class="form-group fg-line dtp-container">
                                @Html.TextBoxFor(model => model.JobEndDate, new { @class = "form-control", style = "background-color:#fff" })
                            </div>
                        </div>

                        <div class="col-sm-4">
                                @Html.LabelFor(model => model.JobPeriod, new { style = "" })
                                <div class="form-group  fg-line">
                                    @Html.TextBoxFor(model => model.JobPeriod, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;", disabled = "disabled" })
                                </div>
                                @Html.ValidationMessageFor(model => model.JobPeriod)
                            </div>
                       
                    </div>
                    <div class="col-sm-12">
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.CompletionDate, new { style = "" })
                            <div class="form-group fg-line dtp-container">
                                @Html.TextBoxFor(model => model.CompletionDate, new { @class = "form-control", style = "background-color:#fff" })
                            </div>
                        </div>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.CompletionPeriod, new { style = "" })
                            <div class="form-group  fg-line">
                                @Html.TextBoxFor(model => model.CompletionPeriod, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;", disabled = "disabled" })
                            </div>
                            @Html.ValidationMessageFor(model => model.CompletionPeriod)
                        </div>
                        <div class="col-sm-3">
                            <span style="color:red">*</span>@Html.LabelFor(model => model.CallStatus, new { })
                            <div class="form-group  fg-line ">
                                @Html.DropDownList("CallStatus", ViewData["CallStatus"] as List<SelectListItem>, new { style = "", @class = "form-control" })
                            </div>
                            @Html.ValidationMessageFor(model => model.CallStatus)
                        </div>
                        <div class="col-sm-3" id="dvResonCode" >
                            @Html.HiddenFor(model => model.ReasonCodeID)
                            <span style="color:red">*</span> @Html.LabelFor(model => model.ReasonCode, new { })
                            <div class="form-group fg-line">
                                @Html.DropDownListFor(model => model.ReasonCode, (SelectList)ViewBag.CCRMBrokenCallReasonMasterList, "-----Select Reason-----", new { @class = "form-control input-sm" })
                            </div>
                        </div>
                        
                    </div>
                    <div class="col-sm-12">
                        <div class="col-sm-4">
                            @Html.LabelFor(model => model.SubmittedOn, new { style = "" })
                            <div class="form-group fg-line dtp-container">
                                @Html.TextBoxFor(model => model.TimeStamp, new { Value = "" + DateTime.UtcNow.ToString("dd MMM yyyy") + "", Readonly = "True", @class = "form-control", style = "background-color:#fff", data_val = "true", data_toggle = "tooltip", data_placement = "top", data_original_title = "Date" })
                            </div>
                        </div>
                        
                        @*<div class="col-sm-3">

                            <div class="checkbox col-sm-12" style="padding-top: 2%; padding-left: 2%;">
                                <label>
                                    <input type="checkbox" id="SCNSubmitted">
                                    <i class="input-helper"></i>
                                    @Html.LabelFor(model => model.SCNSubmitted, new { style = "" })
                                </label>
                                @Html.ValidationMessageFor(model => model.SCNSubmitted)
                            </div>
                        </div>*@
                    </div>
                        <table class="table" style="background: white;">
                            <thead>
                                <tr>
                                    <th>   </th>
                                    <th>A4Mono</th>
                                    <th>A4Col</th>
                                    <th>A3Mono</th>
                                    <th>A3Col</th>
                                </tr>
                            </thead>

                            <tbody>
                                <tr>
                                    <td>Current: </td>
                                    <td>@Html.TextBoxFor(model => model.CurrentReadA4Mono, new { @class = "form-control", maxlength = "100", style = "" })</td>
                                    <td>@Html.TextBoxFor(model => model.CurrentReadA4Col, new { @class = "form-control", maxlength = "100", style = "" })</td>
                                    <td>@Html.TextBoxFor(model => model.CurrentReadA3Mono, new { @class = "form-control", maxlength = "100", style = "" })</td>
                                    <td>@Html.TextBoxFor(model => model.CurrentReadA3Col, new { @class = "form-control", maxlength = "100", style = "" })</td>
                                </tr>
                                <tr>
                                    <td>Previous:</td>
                                    <td>@Html.TextBoxFor(model => model.A4Mono, new { @class = "form-control", maxlength = "100", style = "", disabled = "disabled" })</td>
                                    <td>@Html.TextBoxFor(model => model.A4Col, new { @class = "form-control", maxlength = "100", style = "", disabled = "disabled" })</td>
                                    <td>@Html.TextBoxFor(model => model.A3Mono, new { @class = "form-control", maxlength = "100", style = "", disabled = "disabled" })</td>
                                    <td>@Html.TextBoxFor(model => model.A3Col, new { @class = "form-control", maxlength = "100", style = "", disabled = "disabled" })</td>
                                </tr>
                            </tbody>
                        </table>
                        <div class="col-sm-12">
                            <div class="col-sm-2">
                                <span style="color:red">*</span>

                                @Html.HiddenFor(model => model.SymptomID)
                                @Html.LabelFor(model => model.SymptomCode, new { style = "" })
                                <div class="form-group  fg-line">
                                    @Html.TextBoxFor(model => model.SymptomCode, new { @class = "form-control", maxlength = "100", style = "" })
                                </div>
                                @Html.ValidationMessageFor(model => model.SymptomCode)
                            </div>

                            <div class="col-sm-2">
                                @Html.LabelFor(model => model.Symptom, new { style = "" })
                                <div class="form-group  fg-line">
                                    @Html.TextBoxFor(model => model.Symptom, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;", disabled = "disabled" })
                                </div>
                                @Html.ValidationMessageFor(model => model.Symptom)
                            </div>
                            <div class="col-sm-2">
                                @Html.HiddenFor(model => model.CauseID)
                                <span style="color:red">*</span>@Html.LabelFor(model => model.CauseCode, new { })
                                <div class="form-group  fg-line">
                                    @Html.TextBoxFor(model => model.CauseCode, new { @class = "form-control", maxlength = "100", style = "" })
                                </div>
                            </div>
                            <div class="col-sm-2">
                                @Html.LabelFor(model => model.CauseTitle, new { style = "" })
                                <div class="form-group  fg-line">
                                    @Html.TextBoxFor(model => model.CauseTitle, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;", disabled = "disabled" })
                                </div>
                                @Html.ValidationMessageFor(model => model.CauseTitle)
                            </div>
                            <div class="col-sm-2">
                                @Html.HiddenFor(model => model.ActionID)
                                <span style="color:red">*</span>@Html.LabelFor(model => model.ActionCode, new { })
                                <div class="form-group  fg-line">
                                    @Html.TextBoxFor(model => model.ActionCode, new { @class = "form-control", maxlength = "100", style = "" })
                                </div>
                            </div>
                            <div class="col-sm-2">
                                @Html.LabelFor(model => model.ActionTitle, new { style = "" })
                                <div class="form-group  fg-line">
                                    @Html.TextBoxFor(model => model.ActionTitle, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;", disabled = "disabled" })
                                </div>
                                @Html.ValidationMessageFor(model => model.ActionTitle)
                            </div>
                        </div>
                        <div class="col-sm-12">
                            <div class="col-sm-4">
                                @Html.LabelFor(model => model.SymptomDescrip, new { style = "" })
                                <div class="form-group  fg-line">
                                    @Html.TextBoxFor(model => model.SymptomDescrip, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;" })
                                </div>
                                @Html.ValidationMessageFor(model => model.SymptomDescrip)
                            </div>
                            <div class="col-sm-4">
                                @Html.LabelFor(model => model.CauseDescrip, new { style = "" })
                                <div class="form-group  fg-line">
                                    @Html.TextBoxFor(model => model.CauseDescrip, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;" })
                                </div>
                                @Html.ValidationMessageFor(model => model.CauseDescrip)
                            </div>
                            <div class="col-sm-4">
                                @Html.LabelFor(model => model.ActionDescrip, new { style = "" })
                                <div class="form-group  fg-line">
                                    @Html.TextBoxFor(model => model.ActionDescrip, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;" })
                                </div>
                                @Html.ValidationMessageFor(model => model.ActionDescrip)
                            </div>

                        </div>
                        <div class="col-sm-12">
                            <div class="col-sm-4">
                                @Html.LabelFor(model => model.Remarks, new { style = "" })
                                <div class="form-group  fg-line">
                                    @Html.TextBoxFor(model => model.Remarks, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;" })
                                </div>
                                @Html.ValidationMessageFor(model => model.Remarks)
                            </div>
                            <div class="col-sm-4">
                                @Html.HiddenFor(model => model.FeedbackID)
                                <span style="color:red">*</span>@Html.LabelFor(model => model.Feedback, new { })
                                <div class="form-group fg-line select">
                                    @Html.DropDownListFor(model => model.Feedback, (SelectList)ViewBag.CCRMFeedbackMasterList, "-----Select  Feedback-----", new { @class = "form-control input-sm" })
                                </div>
                            </div>
                            <div class="col-sm-4">
                                @Html.HiddenFor(model => model.SignedID)
                                <span style="color:red">*</span>@Html.LabelFor(model => model.SignedBy, new { })
                                <div class="form-group  fg-line">
                                    @Html.TextBoxFor(model => model.SignedBy, new { @class = "form-control", maxlength = "100", style = "" })
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-12">
                            <div class="col-sm-4">
                                @Html.LabelFor(model => model.PhoneNo, new { style = "" })
                                <div class="form-group  fg-line">
                                    @Html.TextBoxFor(model => model.PhoneNo, new { maxlength = "100", @class = "form-control", style = "background-color:#fff;" })
                                </div>
                                @Html.ValidationMessageFor(model => model.PhoneNo)
                            </div>
                        </div>
                        <div class="col-sm-12">
                            <div class="form-group fg-line">
                                <br />
                            </div>
                        </div>
                        <h4>List Of Items</h4>
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="form-group fg-line">
                                    @Html.HiddenFor(model => model.ItemNumber)
                                    @Html.LabelFor(model => model.ItemName, new { })
                                    @Html.TextBoxFor(model => model.ItemName, new { @class = "form-control input-sm typeahead" })
                                </div>
                            </div>
                            <div class="col-sm-2">
                                <div class="form-group fg-line">

                                    @Html.LabelFor(model => model.ItemCategoryCode, new { })
                                    @Html.TextBoxFor(model => model.ItemCategoryCode, new { @class = "form-control input-sm typeahead", disabled = "disabled" })
                                </div>
                            </div>

                            <div class="col-sm-2">
                                <div class="form-group fg-line">
                                    @*@Html.LabelFor(model => model.AltQty, new { })*@
                                    @Html.LabelFor(model => model.Quantity, new { })
                                    @Html.TextBoxFor(model => model.Quantity, new { maxlength = "8", @class = "form-control input-sm typeahead" })

                                </div>
                            </div>

                            <div class="col-sm-3">
                                @Html.LabelFor(model => model.Requierd, new { })
                                <div class="form-group fg-line select">
                                    @Html.DropDownList("Requierd", ViewData["Requierd"] as List<SelectListItem>, new { @class = "form-control input-sm", data_val = "true", data_toggle = "tooltip", data_placement = "top", data_original_title = "Requierd*" })
                                </div>
                                @Html.ValidationMessageFor(model => model.Requierd)
                            </div>

                            <div class="col-sm-1" id="btnAdd1">
                                <!-- <button type="button" class="btn btn-primary" id="btnAdd">Add Row</button> -->
                                <button type="button" title="Add row" class="btn bgm-green btn-float waves-effect waves-circle waves-float" id="btnAdd" style="margin-top:10px"><i class="zmdi zmdi-plus"></i></button>
                            </div>

                        </div>


                        @*<div id="ListViewModel" class="">*@
                        @*<div id="DivAddRowTable">*@
                        <table id="tblData" class="table table-striped ">
                            <thead>
                                <tr>
                                    <th>Item Name</th>
                                    <th>Item Code</th>
                                    <th>Quantity</th>

                                    <th>Req/Rep</th>
                                    <th>Action</th>
                                </tr>
                            </thead>

                            <tbody>
                                @foreach (var item in Model.ItemsDetailsCCRMServiceReportMasterID)
                                {
                                    <tr>
                                        <td style="display:none">@item.ItemNumber<input type="hidden" style="display:none" value="@item.ItemNumber"></td>
                                        <td style="vertical-align:middle;">@item.ItemName<input id="ItemName" style="display:none" type="text" value="@item.ItemName"></td>
                                        <td style="vertical-align:middle;">@item.ItemCategoryCode<input id="ItemCategoryCode" style="display:none" type="text" value="@item.ItemCategoryCode"></td>
                                        <td style="vertical-align:middle;">@item.Quantity<input id="Quantity" style="display:none" type="text" value="@item.Quantity"></td>
                                        <td style="vertical-align:middle;">@item.Requierd<input id="Requierd" type="text" style="display:none" value="@item.Requierd"></td>
                                        <td style="display:none">@item.ID<input type="hidden" style="display:none" value="@item.ID"></td>
                                        <td style="display:none"><i class='zmdi zmdi-delete zmdi-hc-fw deleteEnq' style='cursor:pointer' title='Delete' /></td>

                                    </tr>
                                }
                            </tbody>
                        </table><br /><br /><br /><br />
                        @*</div>*@
                        @*</div>*@





                        <div class="form-group" style="margin-left: 2%; ">
                            <input class="btn btn-info btn-sm m-t-10 waves-effect" value="@Resources.ButtonAction_Submit" id="EditCCRMServiceReportMasterRecord" type="button" style="margin-left:15px;" />
                        </div>

</form>
            </div>
        </div>
    </div>
</div>
<script src="@Url.Content("~/Scripts/jquery.validate.js") " type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")" type="text/javascript"></script>
<script type="text/javascript">
        $(document).ready(function () {
            CCRMServiceReportMaster.Initialize();
            if ($('#CallStatus').val() == '1') {
                $("#dvResonCode").hide();
            }
            else {
                $("#dvResonCode").show();
            }
            $('#CallStatus').on('change', function () {
                if ($(this).val() == '1') {
                    $("#dvResonCode").hide();
                }
                else {
                    $("#dvResonCode").show();
                }
            });
            // CCRMSymptomMaster serachlist
            mapSymptomCode = [];
            var getDataSymptomCode = function () {
                return function findMatches(q, cb) {

                    var matches, substringRegex;

                    // an array that will be populated with substring matches
                    matches = [];

                    // regex used to determine if a string contains the substring `q`
                    substrRegex = new RegExp(q, 'i');
                    $.ajax({
                        url: "/CCRMSymptomMaster/GetCCRMSymptomMasterSearchList",
                        type: "POST",
                        data: { term: q },
                        dataType: "json",
                        success: function (data) {

                            // iterate through the pool of strings and for any string that
                            // contains the substring `q`, add it to the `matches` array
                            //alert(data);
                            //console.log(data);
                            $.each(data, function (i, response) {

                                if (substrRegex.test(response.SymptomCode)) {
                                    mapSymptomCode[response.SymptomCode] = response;
                                    matches.push(response.SymptomCode);

                                }

                            });

                        },
                        async: false
                    })
                    cb(matches);
                };

            };

            $("#SymptomCode").typeahead({
                hint: true,
                highlight: true,
                minLength: 1
            }, {
                source: getDataSymptomCode()
            }).on("typeahead:selected", function (obj, item) {
                $("#Symptom").val(mapSymptomCode[item].SymptomTitle);
                $("#SymptomCode").val(mapSymptomCode[item].SymptomCode);
                $("#SymptomID").val(mapSymptomCode[item].ID);


            });
            $('#SymptomCode').on("keydown", function (e) {
                if (e.keyCode == 8 || e.keyCode == 46) {
                    $('#SymptomCode').typeahead('val', '');
                    $('#SymptomCode').val("");

                    $("#Symptom").val("");
                    $('#SymptomID').val('0');

                }
            });
            // CCRMCauseMaster serachlist
            mapCauseCode = [];
            var getDataCauseCode = function () {
                return function findMatches(q, cb) {

                    var matches, substringRegex;

                    // an array that will be populated with substring matches
                    matches = [];

                    // regex used to determine if a string contains the substring `q`
                    substrRegex = new RegExp(q, 'i');
                    $.ajax({
                        url: "/CCRMCauseMaster/GetCCRMCauseMasterSearchList",
                        type: "POST",
                        data: { term: q },
                        dataType: "json",
                        success: function (data) {

                            // iterate through the pool of strings and for any string that
                            // contains the substring `q`, add it to the `matches` array
                            //alert(data);
                            //console.log(data);
                            $.each(data, function (i, response) {

                                if (substrRegex.test(response.CauseCode)) {
                                    mapCauseCode[response.CauseCode] = response;
                                    matches.push(response.CauseCode);

                                }

                            });

                        },
                        async: false
                    })
                    cb(matches);
                };

            };

            $("#CauseCode").typeahead({
                hint: true,
                highlight: true,
                minLength: 1
            }, {
                source: getDataCauseCode()
            }).on("typeahead:selected", function (obj, item) {
                $("#CauseCode").val(mapCauseCode[item].CauseCode);
                $("#CauseTitle").val(mapCauseCode[item].CauseTitle);

                $("#CauseID").val(mapCauseCode[item].ID);


            });
            $('#CauseCode').on("keydown", function (e) {
                if (e.keyCode == 8 || e.keyCode == 46) {
                    $('#CauseCode').typeahead('val', '');
                    $('#CauseCode').val("");

                    $("#CauseTitle").val("");
                    $('#CauseID').val('0');

                }
            });
            // CCRMActionMaster serachlist
            mapActionCode = [];
            var getDataActionCode = function () {
                return function findMatches(q, cb) {

                    var matches, substringRegex;

                    // an array that will be populated with substring matches
                    matches = [];

                    // regex used to determine if a string contains the substring `q`
                    substrRegex = new RegExp(q, 'i');
                    $.ajax({
                        url: "/CCRMActionMaster/GetCCRMActionMasterSearchList",
                        type: "POST",
                        data: { term: q },
                        dataType: "json",
                        success: function (data) {

                            // iterate through the pool of strings and for any string that
                            // contains the substring `q`, add it to the `matches` array
                            //alert(data);
                            //console.log(data);
                            $.each(data, function (i, response) {

                                if (substrRegex.test(response.ActionCode)) {
                                    mapActionCode[response.ActionCode] = response;
                                    matches.push(response.ActionCode);

                                }

                            });

                        },
                        async: false
                    })
                    cb(matches);
                };

            };

            $("#ActionCode").typeahead({
                hint: true,
                highlight: true,
                minLength: 1
            }, {
                source: getDataActionCode()
            }).on("typeahead:selected", function (obj, item) {
                $("#ActionCode").val(mapActionCode[item].ActionCode);
                $("#ActionTitle").val(mapActionCode[item].ActionTitle);

                $("#ActionID").val(mapActionCode[item].ID);


            });
            $('#ActionCode').on("keydown", function (e) {
                if (e.keyCode == 8 || e.keyCode == 46) {
                    $('#ActionCode').typeahead('val', '');
                    $('#ActionCode').val("");

                    $("#ActionTitle").val("");
                    $('#ActionID').val('0');

                }
            });
            // GeneralItemMaster serachlist
            mapItemDescription = [];
            var getDataItemDescription = function () {
                return function findMatches(q, cb) {

                    var matches, substringRegex;

                    // an array that will be populated with substring matches
                    matches = [];

                    // regex used to determine if a string contains the substring `q`
                    substrRegex = new RegExp(q, 'i');
                    debugger;
                    $.ajax({
                        url: "/GeneralItemMaster/GetItemNumberSearchList",
                        type: "POST",
                        data: { term: q },
                        dataType: "json",
                        success: function (data) {

                            // iterate through the pool of strings and for any string that
                            // contains the substring `q`, add it to the `matches` array
                            //alert(data);
                            //console.log(data);
                            $.each(data, function (i, response) {

                                if (substrRegex.test(response.ItemDescription)) {
                                    mapItemDescription[response.ItemDescription] = response;
                                    matches.push(response.ItemDescription);

                                }

                            });

                        },
                        async: false
                    })
                    cb(matches);
                };

            };

            $("#ItemName").typeahead({

                hint: true,
                highlight: true,
                minLength: 1
            }, {
                source: getDataItemDescription()
            }).on("typeahead:selected", function (obj, item) {
                debugger;
                $("#ItemName").val(mapItemDescription[item].ItemDescription);

                $("#ItemNumber").val(mapItemDescription[item].ItemNumber);
                $("#ItemCategoryCode").val(mapItemDescription[item].ItemCategoryCode);

            });
            $('#ItemName').on("keydown", function (e) {
                if (e.keyCode == 8 || e.keyCode == 46) {
                    $('#ItemName').val("");
                    $('#ItemName').typeahead('val', '');
                    $("#ItemNumber").val(0);
                    $('#ItemCategoryCode').val("");
                    $("#Quantity").val(0);

                    $("#Requierd").html("");


                }
            });
            //Caller NAme from CCRMComplaintLoggingMaster serachlist
            mapCallerName = [];
            var getDataCallerName = function () {
                var CallTktNo = $('#CallTktNo').val();

                return function findMatches(q, cb) {

                    var matches, substringRegex;

                    // an array that will be populated with substring matches
                    matches = [];
                    // regex used to determine if a string contains the substring `q`
                    substrRegex = new RegExp(q, 'i');
                    $.ajax({
                        url: "/CCRMComplaintLoggingMaster/GetCCRMComplaintLoggingMasterSearchList",
                        type: "POST",
                        data: { term: q, CallTktNo: CallTktNo },
                        dataType: "json",
                        success: function (data) {

                            // iterate through the pool of strings and for any string that
                            // contains the substring `q`, add it to the `matches` array
                            //alert(data);
                            //console.log(data);
                            $.each(data, function (i, response) {

                                if (substrRegex.test(response.CallerName)) {
                                    mapCallerName[response.CallerName] = response;
                                    matches.push(response.CallerName);

                                }

                            });

                        },
                        async: false
                    })
                    cb(matches);
                };

            };

            $("#SignedBy").typeahead({
                hint: true,
                highlight: true,
                minLength: 1
            }, {
                source: getDataCallerName()
            }).on("typeahead:selected", function (obj, item) {
                $("#SignedBy").val(mapCallerName[item].CallerName);
                $("#PhoneNo").val(mapCallerName[item].CallerPh);

                $("#SignedID").val(mapCallerName[item].ID);


            });
            $('#SignedBy').on("keydown", function (e) {
                if (e.keyCode == 8 || e.keyCode == 46) {
                    $('#SignedBy').typeahead('val', '');
                    $('#SignedBy').val("");

                    $("#PhoneNo").val("");
                    $('#SignedID').val('0');

                }
            });
        });
</script>
</div>












