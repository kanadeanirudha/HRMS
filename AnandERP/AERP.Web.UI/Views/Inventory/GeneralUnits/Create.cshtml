@model AERP.ViewModel.GeneralUnitsViewModel
<script src="@Url.Content("~/Scripts/AERP_Scripts/Inventory/GeneralUnits.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Content/Theme/vendors/bower_components/bootstrap-select/dist/css/bootstrap-select.css")" rel="stylesheet" type="text/css" />
@Html.HiddenFor(model => model.GeneralUnitTypeID)
@Html.HiddenFor(model => model.CentreCode)
@Html.HiddenFor(model => model.DepartmentID)
<div id="custom-content">
    <div class="block-header">
        <h2>&nbsp;<i class="zmdi zmdi-view-toc"></i>&nbsp;Create Units</h2>
    </div>
    <div class="card">
        @*<div class="card-body card-padding" >*@
            <div id="displayErrorMessage" role="alert" hidden class="alert">
                <button class="close" type="button"><span aria-hidden="true">×</span></button>
                <p id="messageContent"></p>
            </div>
            <form id="FormCreateGeneralUnits" role="form">
                <div class="col-sm-6">
                    <div class="form-group fg-line">

                        @Html.LabelFor(model => model.UnitName, new { })
                        @Html.TextBoxFor(model => model.UnitName, new { maxlength = "50", @class = "form-control input-sm" })
                    </div>
                    @Html.ValidationMessageFor(model => model.UnitName)
                </div>
                <div class="col-sm-6">
                    <div class="form-group fg-line">

                        @Html.LabelFor(model => model.UnitType, new { })
                        @Html.TextBoxFor(model => model.UnitType, new { maxlength = "50", @class = "form-control input-sm typeahead" ,disabled = "disabled",Value = @Model.UnitType})
                    </div>
                    @Html.ValidationMessageFor(model => model.UnitType)
                </div>
                <div class="col-sm-4">
                    <div class="form-group fg-line">
                        <label>
                            @Html.LabelFor(model => model.LocationName)
                        </label>
                        @Html.HiddenFor(model => model.InventoryLocationMasterID)
                        @Html.TextBoxFor(model => model.LocationName, new { maxlength = "50", @class = "form-control input-sm typeahead" })
                    </div>
                    @Html.ValidationMessageFor(model => model.LocationName)
                </div>

                <div class="col-sm-6" style="display:none">
                    <div class="form-group fg-line">
                        @Html.HiddenFor(model => model.CityId)
                        @Html.LabelFor(model => model.CityName, new { })
                        @Html.TextBoxFor(model => model.CityName, new { maxlength = "50", @class = "form-control input-sm typeahead" })

                    </div>
                    @Html.ValidationMessageFor(model => model.CityName)
                </div>

                <div class="col-sm-4">
                    <div id="checkboxlist" class="form-group">
                        Select Domain
                        <p id="e5_f">
                            <select id="checkboxlist1" class="form-group selectpicker" multiple name="selectCent">
                                @*data-live-search="true"*@
                                @foreach (var item in Model.GetAdminRoleDomainList)
                                {
                                    <option id="@item.AdminRoleDomainApplicableID" value="@item.AdminRoleDomainApplicableID~@item.AdminRoleDomainID">@item.AdminRoleDomainName</option>
                                }
                            </select>
                        </p>
                    </div>
                </div>

                <div class="col-sm-3">
                    <label style="margin-top: 3%; margin-bottom: 3%;">
                        @Html.LabelFor(model => model.IsDefaultUnit, new { style = "padding-left: 0px; margin-top:2%;" })<br /><br />
                            <div class="checkbox col-sm-6" style="margin-top:2%;">
                                <input type="checkbox" id="IsDefaultUnit" name="IsDefaultUnit">
                                <i class="input-helper"></i>
                            </div>
                      
                    </label>

                </div>

                
                    @*<div class="form-group" style="margin-left:2%;">*@
                <div class="form-group col-sm-12">
                    <input class="btn btn-primary btn-sm m-t-10 waves-effect" value="@Resources.ButtonAction_Submit" id="CreateGeneralUnitsRecord" type="button" />
                </div>
                   
</form>
        </div>
    </div>
@*</div>*@
<script src="@Url.Content("~/Content/Theme/vendors/bower_components/bootstrap-select/dist/js/bootstrap-select.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.js") " type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")" type="text/javascript"></script>
<script src="~/Content/Theme/vendors/bower_components/typeahead.js/dist/typeahead.bundle.js"></script>

<script type="text/javascript">
    $(document).ready(function () {
        $('.selectpicker').selectpicker();
        GeneralUnits.Initialize();

        //=======================CityName=================================

        //var map = {};
        //var getData = function () {
        //    return function findMatches(q, cb) {

        //        var matches, substringRegex;

        //        // an array that will be populated with substring matches
        //        matches = [];

        //        // regex used to determine if a string contains the substring `q`
        //        substrRegex = new RegExp(q, 'i');

        //        $.ajax({
        //            url: "/GeneralUnits/GetCityList",
        //            type: "POST",
        //            dataType: "json",
        //            data: { term: q },
        //            success: function (data) {

        //                // iterate through the pool of strings and for any string that
        //                // contains the substring `q`, add it to the `matches` array
        //                $.each(data, function (i, response) {
        //                    if (substrRegex.test(response.name)) {
        //                        map[response.name] = response;
        //                        matches.push(response.name);
        //                        $('#CityId').val(response.id);
                               
        //                    }
        //                });
        //            },
        //            async: false
        //        })
        //        cb(matches);
        //    };

        //};


        //$('#CityName').typeahead({
        //    hint: true,
        //    highlight: true,
        //    minLength: 1
        //},
        //{
        //    source: getData()
        //}).on("#CityName", function (obj, item) {
        //    $('#CityId').val(map[item].id);
        //});
        var map = {};
        var getData = function () {
            return function findMatches(q, cb) {

                var matches, substringRegex;

                // an array that will be populated with substring matches
                matches = [];

                // regex used to determine if a string contains the substring `q`
                substrRegex = new RegExp(q, 'i');
                debugger;
                $.ajax({
                    url: "/GeneralUnitsStorageLocation/GetLocationList",
                    type: "POST",
                    dataType: "json",
                    data: { term: q, GeneralUnitsID: $('#GeneralUnitsID').val(), CentreCode: $('#CentreCode').val() },
                    success: function (data) {

                        // iterate through the pool of strings and for any string that
                        // contains the substring `q`, add it to the `matches` array
                        $.each(data, function (i, response) {
                            if (substrRegex.test(response.name)) {
                                map[response.name] = response;
                                matches.push(response.name);
                               //$('#InventoryLocationMasterID').val(response.id);

                            }
                        });
                    },
                    async: false
                })
                cb(matches);
            };

        };


        //$('#LocationName').typeahead({
        //    hint: true,
        //    highlight: true,
        //    minLength: 1
        //},
        //{
        //    source: getData()
        //}).on("#LocationName", function (obj, item) {
        //    $('#InventoryLocationMasterID').val(map[item].id);
        //});


        $('.typeahead').typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        },
       {
           source: getData()
       }).on("typeahead:selected", function (obj, item) {
           $('#InventoryLocationMasterID').val(map[item].id);
       });




    });
</script>
