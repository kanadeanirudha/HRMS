@model AERP.ViewModel.GeneralUnitStorageLocationViewModel
<script src="@Url.Content("~/Scripts/AERP_Scripts/Inventory/GeneralUnitsStorageLocation.js")" type="text/javascript"></script>
<div id="custom-content">
    <style>
        .actions > li > a::before, .actions > a::before {
            height: 0;
        }


        .btn-float {
            border-radius: 50%;
            height: 40px;
            line-height: 35px !important;
            width: 40px;
        }
        .mfp-content {
            width: 20%;
        }
    </style>

    <div class="block-header">
        @Html.HiddenFor(model => model.GeneralUnitsID)
        @Html.HiddenFor(model => model.IsDefaultCount)
        <h2>&nbsp;<i class="zmdi zmdi-view-toc"></i>&nbsp;Create Unit Storage Location for (@Model.UnitName) unit</h2>
    </div>
    <div class="card">
        @*<div class="card-body card-padding">*@
        <div id="displayErrorMessage" role="alert" hidden class="alert">
            <button class="close" type="button"><span aria-hidden="true">×</span></button>
            <p id="messageContent"></p>
        </div>
        <form id="FormCreateGeneralUnitStorageLocation" role="form">


            <div id="divAllocateJob" margin-top:12%">
                <div class="row col-sm-12">
                    <div class="col-sm-3">
                        <div class="form-group fg-line">
                            <label>
                                @Html.LabelFor(model => model.LocationName)
                            </label>
                            @Html.HiddenFor(model => model.InventoryLocationMasterID)
                            @Html.TextBoxFor(model => model.LocationName, new { maxlength = "50", @class = "form-control input-sm typeahead" })
                        </div>
                        @Html.ValidationMessageFor(model => model.LocationName)
                    </div>
                        
                    <div class="col-sm-3">
                        <label style="margin-top: 3%; margin-bottom: 3%;">
                            @Html.LabelFor(model => model.IsDefault, new { style = "padding-left: 0px; margin-top:2%;" })<br /><br />
                            @if (Model.IsDefaultCount > 1) { 
                            @*@Html.CheckBoxFor(model => model.IsDefault, new {style = "font-Weight:Bold;"})*@
                            <div class="checkbox col-sm-6" style="margin-top:2%;">
                                <input type="checkbox" id="IsDefault" name="IsDefault" disabled="disabled">
                                <i class="input-helper"></i>
                            </div>
                            }
                            else
                            {
                                <div class="checkbox col-sm-6" style="margin-top:2%;">
                                <input type="checkbox" id="IsDefault" name="IsDefault">
                                <i class="input-helper"></i>
                            </div>
                            }
                        </label>

                    </div>


                    <div class="col-sm-2" style="margin-top:20px">
                        <!-- <button type="button" class="btn btn-primary" id="btnAdd">Add Row</button> -->
                        <button type="button" title="Add row" class="btn bgm-cyan btn-float waves-effect waves-circle waves-float" id="btnAdd"><i class="zmdi zmdi-plus"></i></button>
                    </div>
                </div>
            </div>

            <div class="col-sm-8 row">
                <div id="ListViewModel" class="table-responsive">
                    <div id="DivAddRowTable">
                        <table id="tblData" class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Location Name</th>
                                    <th> Is Default</th>
                                    <th>@Resources.DisplayName_Actions</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table><br /><br /><br /><br />
                    </div>
                </div>
            </div>
            <div class="col-sm-12">

                <div class="form-group" style="margin-left:2%;">
                    <input class="btn btn-primary btn-sm m-t-10 waves-effect" value="@Resources.ButtonAction_Submit" id="CreateGeneralUnitsStorageLocationRecord" type="button" />
                </div>

            </div>



        </form>

    </div>
</div>
@*</div>*@

<script src="@Url.Content("~/Content/Theme/vendors/bower_components/bootstrap-select/dist/js/bootstrap-select.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.js") " type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")" type="text/javascript"></script>
<script src="~/Content/Theme/vendors/bower_components/typeahead.js/dist/typeahead.bundle.js"></script>


<script type="text/javascript">
    $(document).ready(function () {
        GeneralUnitsStorageLocation.Initialize();
        //=======================LocationName=================================
        debugger;
        var map = {};
        var getData = function () {
            return function findMatches(q, cb) {

                var matches, substringRegex;

                // an array that will be populated with substring matches
                matches = [];

                // regex used to determine if a string contains the substring `q`
                substrRegex = new RegExp(q, 'i');
                debugger;
                $.ajax({
                    url: "/GeneralUnitsStorageLocation/GetLocationList",
                    type: "POST",
                    dataType: "json",
                    data: { term: q, GeneralUnitsID: $('#GeneralUnitsID').val() },
                    success: function (data) {

                        // iterate through the pool of strings and for any string that
                        // contains the substring `q`, add it to the `matches` array
                        $.each(data, function (i, response) {
                            if (substrRegex.test(response.name)) {
                                debugger;
                                debugger;
                                map[response.name] = response;
                                matches.push(response.name);
                                $('#InventoryLocationMasterID').val(response.id);

                            }
                        });
                    },
                    async: false
                })
                cb(matches);
            };

        };


        $('#LocationName').typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        },
        {
            source: getData()
        }).on("#LocationName", function (obj, item) {
            $('#InventoryLocationMasterID').val(map[item].id);
        });


    });
</script>
