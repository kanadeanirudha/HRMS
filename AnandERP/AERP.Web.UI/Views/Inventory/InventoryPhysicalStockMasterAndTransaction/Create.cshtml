@model AMS.ViewModel.InventoryPhysicalStockMasterAndTransactionViewModel
@*<script src="@Url.Content("~/Scripts/AMS_Scripts/Inventory_1/InventoryPhysicalStockMasterAndTransaction.js")" type="text/javascript"></script>*@
<div id="custom-content">
    <style>
        .actions > li > a::before, .actions > a::before {
            height: 0;
        }


        .btn-float {
            border-radius: 50%;
            height: 40px;
            line-height: 35px !important;
            width: 40px;
        }
    </style>

    <div class="block-header">
        @*@Html.HiddenFor(model => model.GeneralUnitsID)*@
          
        <h2>&nbsp;<i class="zmdi zmdi-view-toc"></i>&nbsp;Stock Transaction</h2>
    </div>
    <div class="card">
        
            <div id="displayErrorMessage" role="alert" hidden class="alert">
                <button class="close" type="button"><span aria-hidden="true">×</span></button>
                <p id="messageContent"></p>
            </div>
            <form id="FormCreateInventoryPhysicalStockMasterAndTransaction" role="form">


                <div id="divAllocateJob" margin-top:12%">
                    <div class="col-sm-12" @*style="border: 1px solid;border-color:lightgrey; padding: 20px 0px; margin-bottom: 15px;"*@>

                        <div class="col-sm-2">
                            <div class="form-group fg-line">
                                <label>
                                    @Html.LabelFor(model => model.ItemDescription)
                                </label>
                                @Html.HiddenFor(model => model.GeneralItemMasterID)
                                @Html.HiddenFor(model => model.ItemBarCodeId)
                                @Html.HiddenFor(model => model.ItemNumber)
                                @Html.TextBoxFor(model => model.ItemDescription, new { maxlength = "50", @class = "form-control input-sm typeahead" })
                            </div>
                            @*@Html.ValidationMessageFor(model => model.ItemDescription)*@
                        </div>
                        <div class="col-sm-1">
                            <div class="form-group fg-line">
                                <label>
                                    @Html.LabelFor(model => model.Rate)
                                </label>

                                @Html.TextBoxFor(model => model.Rate, new { maxlength = "50", @class = "form-control input-sm typeahead", disabled = "disabled" })
                            </div>
                            @*@Html.ValidationMessageFor(model => model.Rate)*@
                        </div>
                        <div class="col-sm-1">
                            <div class="form-group fg-line">
                                <label>
                                    @Html.LabelFor(model => model.Unit)
                                </label>

                                @Html.TextBoxFor(model => model.Unit, new { maxlength = "50", @class = "form-control input-sm typeahead", disabled = "disabled" })
                            </div>
                            @*@Html.ValidationMessageFor(model => model.Unit)*@
                        </div>
                        <div class="col-sm-1">
                            <div class="form-group fg-line">
                                <label>
                                    @Html.LabelFor(model => model.CurrentQty)
                                </label>

                                @Html.TextBoxFor(model => model.CurrentQty, new { maxlength = "50", @class = "form-control input-sm typeahead" })
                            </div>
                            @*@Html.ValidationMessageFor(model => model.CurrentQty)*@
                        </div>
                        <div class="col-sm-1">
                            <div class="form-group fg-line">
                                <label>
                                    @Html.LabelFor(model => model.PhysicalQty)
                                </label>

                                @Html.TextBoxFor(model => model.PhysicalQty, new { maxlength = "50", @class = "form-control input-sm typeahead", disabled = "disabled" })
                            </div>
                            @*@Html.ValidationMessageFor(model => model.PhysicalQty)*@
                        </div>

                        <div class="col-sm-1">
                            <div class="form-group fg-line">
                                <label>
                                    @Html.LabelFor(model => model.ShrinkQuantity)
                                </label>

                                @Html.TextBoxFor(model => model.ShrinkQuantity, new { maxlength = "50", @class = "form-control input-sm typeahead" })
                            </div>
                            @*@Html.ValidationMessageFor(model => model.ShrinkQuantity)*@
                        </div>
                        <div class="col-sm-1">
                            <div class="form-group fg-line">
                                <label>
                                    @Html.LabelFor(model => model.DumpQuantity)
                                </label>

                                @Html.TextBoxFor(model => model.DumpQuantity, new { maxlength = "50", @class = "form-control input-sm typeahead" })
                            </div>
                            @*@Html.ValidationMessageFor(model => model.DumpQuantity)*@
                        </div>

                        <div class="col-sm-3">
                            <div class="form-group fg-line">
                                <label>
                                    @Html.LabelFor(model => model.Remark)
                                </label>

                                @Html.TextBoxFor(model => model.Remark, new { maxlength = "50", @class = "form-control input-sm typeahead" })
                            </div>
                            @*@Html.ValidationMessageFor(model => model.Remark)*@
                        </div>
                        <div class="col-sm-1" style="margin-top:15px">
                            <!-- <button type="button" class="btn btn-primary" id="btnAdd">Add Row</button> -->
                            <button type="button" title="Add row" class="btn bgm-cyan btn-float waves-effect waves-circle waves-float" id="btnAdd"><i class="zmdi zmdi-plus"></i></button>
                        </div>


                    </div>



                </div>

                @*<div class=" rowcol-sm-12">*@
                <div class="col-sm-12">
                    <div id="ListViewModel" class="">
                        <div id="DivAddRowTable">
                            <table id="tblData" class="table table-striped " >
                                <thead>
                                    <tr>

                                        <th>Item Description</th>
                                        <th>Rate</th>
                                        <th>Unit</th>
                                        <th>Shrink Qty</th>
                                        <th>Waste Qty</th>
                                        <th>Amount</th>
                                        <th>Remark</th>
                                        <th>@Resources.DisplayName_Actions</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table><br /><br /><br /><br />
                        </div>
                    </div>
                </div>
                @*</div>*@

                <div class="col-sm-12">
                    <div class="col-sm-1">
                        <label style="margin-top:8px;">
                            @Html.LabelFor(model => model.Count)
                        </label>
                    </div>
                    <div class="col-sm-1" style="margin-top:8px;">
                        @Html.TextBoxFor(model => model.Count, new { maxlength = "50", @class = "form-control input-sm typeahead", disabled = "disabled" })

                    </div>
                    <div class="col-sm-1">
                        <label style="margin-top:8px;">
                            @Html.LabelFor(model => model.TotalAmount)
                        </label>
                    </div>
                    <div class="col-sm-1" style="margin-top:8px;">
                        @Html.TextBoxFor(model => model.TotalAmount, new { maxlength = "50", @class = "form-control input-sm typeahead", disabled = "disabled" })

                    </div>
                
                 </div>
                    <div class="col-sm-12">

                        <div class="form-group" style="margin-left:1%;">
                           <input class="btn btn-primary btn-sm m-t-10 waves-effect" value="@Resources.ButtonAction_Submit" id="CreateInventoryPhysicalStockMasterAndTransactionRecord" type="button" />
                        </div>

                    </div>



</form>
        </div>
    
</div>


<script src="@Url.Content("~/Scripts/jquery.validate-1.15.0.js") " type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/materialtheme/vendors/bower_components/bootstrap-select/dist/js/bootstrap-select.js")" type="text/javascript"></script>
<script src="~/Content/materialtheme/vendors/bower_components/typeahead.js/dist/typeahead.bundle.js"></script>



<script type="text/javascript">
    $(document).ready(function () {
        InventoryPhysicalStockMasterAndTransaction.Initialize();
        //=============Search Item Description============================
        var map = {};
        var getData1 = function () {
            return function findMatches(q, cb) {
                var matches, substringRegex;

                // an array that will be populated with substring matches
                matches = [];

                // regex used to determine if a string contains the substring `q`
                substrRegex = new RegExp(q, 'i');

                $.ajax({
                    url: "/InventoryPhysicalStockMasterAndTransaction/GetItemDescriptionDetails",
                    type: "POST",
                    dataType: "json",
                    data: { term: q },
                    success: function (data) {
                       
                        // iterate through the pool of strings and for any string that
                        // contains the substring `q`, add it to the `matches` array
                        $.each(data, function (i, response1) {
                            // if (substrRegex.test(response.name)) {
                            map[response1.ItemDescription] = response1;
                            matches.push(response1.ItemDescription);
                            // }
                        });
                    },
                    async: false
                })
                cb(matches);
            };
        };


        $('#ItemDescription').typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        },
        {
            name: 'states',
            source: getData1()
        }).on("typeahead:selected", function (obj, item) {
            $('#GeneralItemMasterID').val(map[item].id);
            $('#ItemDescription').val(map[item].ItemDescription);
            $('#Unit').val(map[item].UomCode);
            $('#Rate').val(map[item].price);
            $('#ItemBarCodeId').val(map[item].barcodeid);
            $('#ItemNumber').val(map[item].itemnumber);
        });



    });
</script>
