@model AMS.ViewModel.GeneralPackingTypeInfoViewModel
@*@Html.HiddenFor(model => model.InventoryRecipeMasterId)*@
<div id="custom-content">
    <div class="block-header">
        <h2>&nbsp;<i class="zmdi zmdi-view-toc"></i>&nbsp;Create Packing Type Information</h2>
    </div>
    <div class="card">
        @*<div class="card-body card-padding">*@
        <div id="displayErrorMessage" role="alert" hidden class="alert">
            <button class="close" type="button"><span aria-hidden="true">×</span></button>
            <p id="messageContent"></p>
        </div>
        <form id="FormCreateGeneralPackingTypeInfo" role="form">
            <div class="form-group col-sm-12">
                <div class="form-group fg-line">
                    @Html.HiddenFor(model => model.ItemCodeID)
                    @Html.LabelFor(model => model.ItemDescription, new { })
                    @Html.TextBoxFor(model => model.ItemDescription, new { @class = "form-control input-sm typeahead" })
                </div>
                @Html.ValidationMessageFor(model => model.ItemDescription)
            </div>
            <div class="form-group col-sm-12">
                <div class="form-group fg-line">
                    @Html.HiddenFor(model => model.UomCodeId)
                    @Html.LabelFor(model => model.UomCode, new { })
                    @Html.TextBoxFor(model => model.UomCode, new { @class = "form-control input-sm typeahead" })
                </div>
                @Html.ValidationMessageFor(model => model.UomCode)
            </div>
            <div class="form-group col-sm-6">
                <div class="form-group select fg-line">
                    @Html.HiddenFor(model => model.PackageTypeID)
                    @Html.LabelFor(model => model.PackageType, new { })
                    @Html.DropDownListFor(model => model.PackageType, (SelectList)ViewBag.InventoryRecipeList, "---Select Package Type ---", new { @class = "form-control input-sm" })
                </div>
                @Html.ValidationMessageFor(model => model.PackageType)
            </div>
            <div class="form-group col-sm-6">
                <div class="form-group fg-line">
                    @Html.LabelFor(model => model.QuantityPerPackage, new { })
                    @Html.TextBoxFor(model => model.QuantityPerPackage, new { maxlength = "60", @class = "form-control input-sm typeahead" })
                </div>
                @Html.ValidationMessageFor(model => model.QuantityPerPackage)
            </div>
            <div class="form-group col-sm-6">
                <div class="form-group fg-line">
                    <span style="color:red">*</span> @Html.LabelFor(model => model.Height, new { })
                    @Html.TextBoxFor(model => model.Height, new { maxlength = "10", @class = "form-control input-sm " })

                </div>
                @Html.ValidationMessageFor(model => model.Height)
            </div>
            <div class="form-group col-sm-6">
                <div class="form-group fg-line">
                    <span style="color:red">*</span> @Html.LabelFor(model => model.Length, new { })
                    @Html.TextBoxFor(model => model.Length, new { maxlength = "10", @class = "form-control input-sm " })

                </div>
                @Html.ValidationMessageFor(model => model.Length)
            </div>
            <div class="form-group col-sm-6">
                <div class="form-group fg-line">
                    <span style="color:red">*</span> @Html.LabelFor(model => model.Width, new { })
                    @Html.TextBoxFor(model => model.Width, new { maxlength = "10", @class = "form-control input-sm " })

                </div>
                @Html.ValidationMessageFor(model => model.Width)
            </div>
            <div class="form-group col-sm-6">
                <div class="form-group fg-line">
                    <span style="color:red">*</span> @Html.LabelFor(model => model.Weight, new { })
                    @Html.TextBoxFor(model => model.Weight, new { maxlength = "10", @class = "form-control input-sm " })

                </div>
                @Html.ValidationMessageFor(model => model.Weight)
            </div>

            <div class="form-group col-sm-6">
                <div class="form-group fg-line">
                    <span style="color:red">*</span> @Html.LabelFor(model => model.Volume, new { })
                    @Html.TextBoxFor(model => model.Volume, new { maxlength = "10", @class = "form-control input-sm " })

                </div>
                @Html.ValidationMessageFor(model => model.Volume)
            </div>

            <div class="form-group col-sm-8">
                <input class="btn btn-primary btn-sm m-t-10 waves-effect" value="@Resources.ButtonAction_Submit" id="CreateGeneralPackingTypeInfoRecord" type="button" />
            </div>
            @*<div class="form-group col-sm-12">
                    <input class="btn btn-primary" style="margin-left:1%" value="@Resources.ButtonAction_Submit" id="CreateGeneralPackingTypeInfoRecord" type="button" />
                </div>*@
        </form>
        @*</div>*@
    </div>
</div>

<script src="@Url.Content("~/Scripts/jquery.validate-1.15.0.js") " type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")" type="text/javascript"></script>
<script src="~/Content/materialtheme/vendors/bower_components/typeahead.js/dist/typeahead.bundle.js"></script>

<script type="text/javascript">
    $(document).ready(function () {
        GeneralPackingTypeInfo.Initialize();

        //=====================UOM Code Search List======================

        var map = {};
        var getData = function () {
            return function findMatches(q, cb) {

                var matches, substringRegex;

                // an array that will be populated with substring matches
                matches = [];

                // regex used to determine if a string contains the substring `q`
                substrRegex = new RegExp(q, 'i');

                $.ajax({
                    url: "/GeneralPackingTypeInfo/GetUomCodeDetails",
                    type: "POST",
                    dataType: "json",
                    data: { term: q },
                    success: function (data) {

                        // iterate through the pool of strings and for any string that
                        // contains the substring `q`, add it to the `matches` array
                        $.each(data, function (i, response) {
                            if (substrRegex.test(response.name)) {
                                map[response.name] = response;
                                matches.push(response.name);
                                $('#UomCodeId').val(response.id);

                            }
                        });
                    },
                    async: false
                })
                cb(matches);
            };

        };


        $('#UomCode').typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        },
        {
            source: getData()
        }).on("#UomCode", function (obj, item) {
            $('#UomCodeId').val(map[item].id);

        });

        //=============Search Item Description============================
        var map = {};
        var getData = function () {
            return function findMatches(q, cb) {

                var matches, substringRegex;

                // an array that will be populated with substring matches
                matches = [];

                // regex used to determine if a string contains the substring `q`
                substrRegex = new RegExp(q, 'i');

                $.ajax({
                    url: "/GeneralPackingTypeInfo/GetItemDescriptionDetails",
                    type: "POST",
                    dataType: "json",
                    data: { term: q },
                    success: function (data) {

                        // iterate through the pool of strings and for any string that
                        // contains the substring `q`, add it to the `matches` array
                        $.each(data, function (i, response) {
                            if (substrRegex.test(response.name)) {
                                map[response.name] = response;
                                matches.push(response.name);
                               

                            }
                        });
                    },
                    async: false
                })
                cb(matches);
            };

        };


        $('#ItemDescription').typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        },
        {
            source: getData()
        }).on("typeahead:selected", function (obj, item) {
            $('#ItemCodeID').val(map[item].id);
           

        });




    });
</script>
