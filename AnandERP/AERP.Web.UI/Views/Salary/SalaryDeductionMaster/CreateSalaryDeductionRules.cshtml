@model AERP.ViewModel.SalaryDeductionMasterViewModel
<link href="@Url.Content("~/Content/Theme/vendors/bower_components/bootstrap-select/dist/css/bootstrap-select.css")" rel="stylesheet" type="text/css" />
<div id="custom-content">
    <div class="block-header">
        <h2>&nbsp;<i class="zmdi zmdi-view-toc"></i>&nbsp;Create Salary Deduction Rule</h2>
    </div>
    <div class="card">
        <div class="card-body card-padding">
            <div id="displayErrorMessage" role="alert" hidden class="alert">
                <button class="close" type="button"><span aria-hidden="true">×</span></button>
                <p id="messageContent"></p>
            </div>
            <form id="FormCreateSalaryDeductionRules">
                @Html.HiddenFor(m => m.ID)
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)

                <div class="col-sm-12">
                    <div class="col-sm-6">
                        <div class="form-group  fg-line">
                            <div class="checkbox">
                                <label>
                                    @if (Model.IsGenderSpecific == true)
                                    {
                                        <input type="checkbox" value="" id="IsGenderSpecific" checked>
                                    }
                                    else
                                    {
                                        <input type="checkbox" value="" id="IsGenderSpecific">
                                    }
                                    <i class="input-helper"></i>
                                    @Html.LabelFor(model => model.IsGenderSpecific, new { style = "" })
                                </label>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(model => model.IsGenderSpecific)
                    </div>

                    <div class="col-sm-6">
                        @Html.LabelFor(model => model.Gender, new { style = "" })
                        <div class="form-group  fg-line">
                            @Html.DropDownList("Gender", (SelectList)ViewBag.GenderList, "---Select Gender---", new { style = "", @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Gender)
                    </div>
                </div>
                <div class="col-sm-12">
                    <div class="col-sm-6">
                        @Html.LabelFor(model => model.FixedAmount, new { style = "" })
                        <div class="form-group  fg-line">
                            @Html.TextBoxFor(model => model.FixedAmount, new { @class = "form-control", maxlength = "200", style = "" })
                        </div>
                        @Html.ValidationMessageFor(model => model.FixedAmount)
                    </div>

                    <div class="col-sm-6">
                        @Html.LabelFor(model => model.Percentage, new { style = "" })
                        <div class="form-group  fg-line">
                            @Html.TextBoxFor(model => model.Percentage, new { @class = "form-control", maxlength = "200", style = "" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Percentage)
                    </div>
                </div>
                <div class="col-sm-12">
                    <div class="col-sm-6">
                        @Html.LabelFor(model => model.CalculateOn, new { style = "" })
                        <div class="form-group  fg-line">
                            @*@Html.DropDownList("CalculateOn", (SelectList)ViewBag.CalculateOnList, "---Select---", new { style = "", @class = "form-control" })*@
                            <select class="form-group selectpicker" id="CalculateOn" multiple name="selectCalculateOn">
                                @*<option value="">---Select---</option>*@
                                @foreach (var item in Model.CalculateOnListForRules)
                                {
                                    <option value="@item.ReferenceID~@item.AllowanceOrDeduction~@item.SalaryDeductionSumOfID">@item.CalculateOnName</option>
                                }
                            </select>
                        </div>
                        @Html.ValidationMessageFor(model => model.CalculateOn)
                    </div>
                    <div class="col-sm-6">
                        @Html.LabelFor(model => model.CalculateOnFixedAmount, new { style = "" })
                        <div class="form-group  fg-line">
                            @Html.TextBoxFor(model => model.CalculateOnFixedAmount, new { @class = "form-control", maxlength = "200", style = "" })
                        </div>
                        @Html.ValidationMessageFor(model => model.CalculateOnFixedAmount)
                    </div>
                    
                </div>
                <div class="col-sm-12">
                    <div class="col-sm-6">
                        @Html.LabelFor(model => model.EffectedDate, new { style = "" })
                        <div class="form-group  fg-line">
                            @Html.TextBoxFor(model => model.EffectedDate, new { @class = "form-control", maxlength = "200", style = "" })
                        </div>
                        @Html.ValidationMessageFor(model => model.EffectedDate)
                    </div>

                    <div class="col-sm-6">
                        @Html.LabelFor(model => model.CloseDate, new { style = "" })
                        <div class="form-group  fg-line">
                            @Html.TextBoxFor(model => model.CloseDate, new { @class = "form-control", maxlength = "200", style = "" })
                        </div>
                        @Html.ValidationMessageFor(model => model.CloseDate)
                    </div>
                    

                </div>
                <div class="col-sm-12">
                    <div class="col-sm-6">
                        <div class="form-group  fg-line">
                            <div class="checkbox">
                                <label>
                                    @if (Model.IsCurrent == true)
                                    {
                                        <input type="checkbox" value="" id="IsCurrent" checked>
                                    }
                                    else
                                    {
                                        <input type="checkbox" value="" id="IsCurrent">
                                    }
                                    <i class="input-helper"></i>
                                    @Html.LabelFor(model => model.IsCurrent, new { style = "" })
                                </label>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(model => model.IsCurrent)
                    </div>

                    <div class="col-sm-6">
                        @Html.LabelFor(model => model.RangeFrom, new { style = "" })
                        <div class="form-group  fg-line">
                            @Html.TextBoxFor(model => model.RangeFrom, new { @class = "form-control", maxlength = "200", style = "" })
                        </div>
                        @Html.ValidationMessageFor(model => model.RangeFrom)
                    </div>
                   
                </div>
                <div class="col-sm-12">
                    <div class="col-sm-6">
                        @Html.LabelFor(model => model.RangeUpto, new { style = "" })
                        <div class="form-group  fg-line">
                            @Html.TextBoxFor(model => model.RangeUpto, new { @class = "form-control", maxlength = "200", style = "" })
                        </div>
                        @Html.ValidationMessageFor(model => model.RangeUpto)
                    </div>
                    <div class="col-sm-6">
                        @Html.LabelFor(model => model.ContributionType, new { style = "" })
                        <div class="form-group  fg-line">
                            @Html.DropDownList("ContributionType", (SelectList)ViewBag.ContributionTypeList, "---Select---", new { style = "", @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(model => model.ContributionType)
                    </div>
                </div>

                <div class="form-group" style="margin-left: 2%; ">
                    <input class="btn btn-primary btn-sm m-t-10 waves-effect" value="@Resources.ButtonAction_Submit" id="CreateSalaryDeductionRulesRecord" type="button" />
                    <input name="" id="reset" type="submit" class="btn btn-default" value="@Resources.ButtonAction_Reset" />
                </div>
            </form>
        </div>
    </div>
</div>
<script src="@Url.Content("~/Scripts/jquery.validate.js") " type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")" type="text/javascript"></script>

<script src="@Url.Content("~/Content/Theme/vendors/bower_components/bootstrap-select/dist/js/bootstrap-select.js")" type="text/javascript"></script>
<script type="text/javascript">
    $(document).ready(function () {
        $('.selectpicker').selectpicker();
        SalaryDeductionMaster.Initialize();
    });
</script>



