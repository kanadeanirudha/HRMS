@model AMS.ViewModel.EmpEmployeeMasterViewModel
@{
    Layout = null;
}
<style type="text/css">
    .mfp-content {
        width: 35% !important;
    }
    @@media (max-width:768px) {
        .mfp-content {
            width: 100% !important;
        }
    }
    .sweet-overlay {
        z-index: 1043 !important;
    }
</style>
<script src="@Url.Content("~/Content/materialtheme/js/functions.js")" type="text/javascript"></script>

@*<script src="@Url.Content("~/Content/materialtheme/js/demo.js")" type="text/javascript"></script>*@
<link href="@Url.Content("~/Content/materialtheme/vendors/bower_components/bootstrap-sweetalert/lib/sweet-alert.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Content/materialtheme/vendors/bower_components/bootstrap-sweetalert/lib/sweet-alert.min.js")" type="text/javascript"></script>

<div id="custom-content">

    <div class="block-header">
        <h2>&nbsp;<i class="zmdi zmdi-view-toc"></i>Change Password</h2>
    </div>

    <div class="card">
        <div class="card-body card-padding">
            <form id="FormChangePassword" method="post">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                @Html.HiddenFor(m => m.Password)
                @Html.HiddenFor(m => m.ID)
                <div class="m-b-20 col-sm-12">
                    <div class="form-group fg-line">
                        <label class="">@Html.LabelFor(model => model.CurrentPassword)</label>
                        @Html.TextBoxFor(model => model.CurrentPassword, new { @class = "form-control input-sm", value = "", style = "", type = "password", maxlength = "100", minlength = "6" })
                       
                        @Html.ValidationMessageFor(model => model.CurrentPassword)
                    </div>
                </div>

                <div class="m-b-20 col-sm-12">
                    <div class="form-group fg-line">
                        <label class="">@Html.LabelFor(model => model.NewPassword)</label>
                        @Html.TextBoxFor(model => model.NewPassword, new { @class = "form-control input-sm", style = "", type = "password", maxlength = "100", minlength = "6" })
                        
                        @Html.ValidationMessageFor(model => model.NewPassword)
                    </div>
                </div>

                <div class="m-b-20 col-sm-12">
                    <div class="form-group fg-line">
                        <label class="">@Html.LabelFor(model => model.ConfirmPassword)</label>
                        <input name="ConfirmPassword" class="form-control input-sm" id="ConfirmPassword" onkeyup="checkPass(); return false;" style="" type="password">
                        <span id="confirmMessage" class="confirmMessage1"></span>
                        
                        @Html.ValidationMessageFor(model => model.ConfirmPassword)
                    </div>
                </div>
                <button id="CreateChangePasswordRecord" type="button" class="btn btn-primary waves-effect">@Resources.ButtonAction_Submit</button>
            </form>
        </div>
    </div>
</div>


<script type="text/javascript">
    $(document).ready(function () {
        $('#CreateChangePasswordRecord').on("click", function () {
            var EmployeeInformationData = {};
            if ($('#CurrentPassword').val() == "" || ($('#CurrentPassword').val() == null)) {
                swal("Please Enter Current Password","","warning");
                return false;
            }
            else if ($('#NewPassword').val() == "" || ($('#NewPassword').val() == null)) {
                swal("Please Enter New Password", "", "warning");
                return false;
            }
            else if (($('#NewPassword').val() != "") && (($("#NewPassword").val().length) < 6)) {
                swal("Please enter at least 6 characters", "", "warning");
                return false;
            }

            else if ($('#ConfirmPassword').val() == "" || ($('#ConfirmPassword').val() == null)) {
                swal("Please Enter Confirm Password", "", "warning");
                return false;
            }


            else if (($('#CurrentPassword').val()) != ($('input[name=Password]').val())) {
                swal("Current Password does not match with Password", "", "warning");
                return false;
            }

            else if (($('#NewPassword').val()) != ($('#ConfirmPassword').val())) {
                swal("New Password does not match with Confirm Password", "", "warning");
                return false;
            }

            else {
                EmployeeInformationData.ID = $('#ID').val();
                EmployeeInformationData.NewPassword = $('#NewPassword').val(); 
                ajaxRequest.makeRequest("/EmployeeInformation/_ChangePasswordV2", "POST", EmployeeInformationData, Success);
            }

        });
    });

    function Success(data) {
        var splitData = data.split(',');
        if (data != null) {
            $.magnificPopup.close();
            notify(splitData[0], splitData[1]);
        } else {
            $.magnificPopup.close();
            //notify(message, colorCode);
            notify(splitData[0], splitData[1]);
        }
    }

    function checkPass() {      
        var goodColor = "#66cc66";
        var badColor = "#ff6666";       
        if (($('#NewPassword').val()) == ($('#ConfirmPassword').val())) {           
            ConfirmPassword.style.backgroundColor = goodColor;          
        } else {          
            ConfirmPassword.style.backgroundColor = badColor;           
        }
    }

</script>

