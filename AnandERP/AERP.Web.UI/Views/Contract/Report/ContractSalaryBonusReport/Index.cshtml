@model AERP.ViewModel.ContractSalaryBonusReportViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@*<script src="@Url.Content("~/Scripts/AERP_Scripts/Account/ContractSalaryBonusReport.js")" type="text/javascript"></script>*@
<script src="@Url.Content("~/Content/Theme/vendors/bower_components/moment/min/moment.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/Theme/vendors/bower_components/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js")" type="text/javascript"></script>
<script src="~/Content/Theme/vendors/bower_components/typeahead.js/dist/typeahead.bundle.js"></script>
<div class="container" style="padding-bottom:10px;">
    @using (Html.BeginForm("Index", "ContractSalaryBonusReport", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        <div class="block-header">
            <h2 style="text-transform: none;"><i class="zmdi zmdi-view-toc"></i>&nbsp;Contract Salary Bonus Report</h2>
        </div>

        <div class="card" style="margin-bottom: 0px;">
            <div class="card-body card-padding">
                <div class="row">
                    <div class="col-sm-3">
                        @Html.HiddenFor(m => m.IsPosted)
                        @Html.HiddenFor(m => m.ReportTypeDisplay)
                        <div class="form-group fg-line">
                            @Html.HiddenFor(m => m.SaleContractMasterID)
                            @Html.LabelFor(model => model.ContractNumber, new { })
                            @Html.TextBoxFor(model => model.ContractNumber, new { @class = "form-control input-sm typeahead" })
                        </div>
                        @Html.ValidationMessageFor(model => model.ContractNumber)
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group fg-line">
                            <label>@Html.LabelFor(model => model.AccountSessionID, new { })</label>
                            @Html.DropDownListFor(m => m.AccountSessionID, Model.AccountSessionMasterItems, "------Select Account Session-------", new { @class = "form-control input-sm", data_val = "true", data_toggle = "tooltip", data_placement = "top", data_original_title = "Account Session*" })
                        </div>
                        @Html.ValidationMessageFor(model => model.AccountSessionID)
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group fg-line">
                            <label>@Html.LabelFor(model => model.FromDate, new { })</label>
                            @Html.TextBoxFor(model => model.FromDate, new { maxlength = "12", @class = "form-control input-sm typeahead" })
                        </div>
                        @Html.ValidationMessageFor(model => model.FromDate)
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group fg-line">
                            <label>@Html.LabelFor(model => model.UptoDate, new { })</label>
                            @Html.TextBoxFor(model => model.UptoDate, new { maxlength = "12", @class = "form-control input-sm typeahead" })
                        </div>
                        @Html.ValidationMessageFor(model => model.UptoDate)
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group fg-line select">
                            @Html.DropDownList("ReportType", ViewData["ReportType"] as List<SelectListItem>, new { @class = "form-control input-sm", data_val = "true", data_toggle = "tooltip", data_placement = "top", data_original_title = "Report Type" })
                        </div>
                        @Html.ValidationMessageFor(model => model.ReportType)
                    </div>
                    
                    <div class="col-sm-2" style="">
                        <div class="fg-line">
                            <button type="submit" name="submit" id="btnContractSalaryBonusReportSubmit" class="btn-primary btn">Show</button>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    }
</div>
<div class="container" style="margin-top:-10px">
    <div id="aaa">
        <div class="card">
            <div class="card-header"></div>
            <div class="card-body card-padding">
                @Html.Partial("/Views/Contract/Report/ContractSalaryBonusReport/ContractSalaryBonusReport.aspx")
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $("#btnContractSalaryBonusReportSubmit").click(function () {
            debugger
            $("#IsPosted").val(true);
            $("#ReportTypeDisplay").val( $("#ReportType :selected").text());
            //$("#CentreName").val($("#CentreCode :selected").text());
            //$("#SalaryMonthName").val($("#SalaryMonth :selected").text());

            //var SearchFor = $("#SearchFor").val();
            //if (SearchFor != "") {
            //    var SplitSearchFor = SearchFor.split(',');
            //    var ParameterXML = "<rows>";
            //    for (var i = 0; i < SplitSearchFor.length; i++) {
            //        ParameterXML = ParameterXML + "<row><SaleContractMasterID>" + SplitSearchFor[i] + "</SaleContractMasterID></row>";
            //    }
            //    if (ParameterXML.length > 6) {
            //        ParameterXML = ParameterXML + "</rows>";
            //    } else {
            //        ParameterXML = "";
            //    }
            //    $("#SearchForXML").val(ParameterXML);
            //}

        });

        $('#FromDate').datetimepicker({
            format: 'DD MMMM YYYY',
            ignoreReadonly: true,
        });
        $('#UptoDate').datetimepicker({
            format: 'DD MMMM YYYY',
            ignoreReadonly: true,
        });

        $("#FromDate").on("dp.change", function (e) {
            var minDate = new Date(e.date.valueOf());
            minDate.setDate(minDate.getDate());
            $('#UptoDate').data("DateTimePicker").minDate(minDate);

        });

        $("#UptoDate").on("dp.change", function (e) {
            var minDate = new Date(e.date.valueOf());
            minDate.setDate(minDate.getDate());
            $('#FromDate').data("DateTimePicker").maxDate(minDate);
        });

        $('#AccountSessionID').on("change", function () {

            var minDate = new Date(new Date($('#AccountSessionID :selected').text().split('-')[0]));
            minDate.setDate(minDate.getDate());
            var maxDate = new Date(new Date($('#AccountSessionID :selected').text().split('-')[1]));
            maxDate.setDate(maxDate.getDate());
            $('#FromDate').data("DateTimePicker").minDate(minDate);
            $('#UptoDate').data("DateTimePicker").maxDate(maxDate);
            $("#FromDate").val($('#AccountSessionID :selected').text().split('-')[0]);
            $("#UptoDate").val($('#AccountSessionID :selected').text().split('-')[1]);

        });

        //$("#btnContractSalaryBonusReportReset").click(function () {
        //    $("#SearchFor").val('');
        //    $("#SearchForDisplay").val('')
        //    $("#SearchForDisplaySpan").text('');
        //    $(this).hide();
        //});

        mapContractNumber = [];
        var getDataContractNumber = function () {
            return function findMatches(q, cb) {

                var matches, substringRegex;

                // an array that will be populated with substring matches
                matches = [];

                // regex used to determine if a string contains the substring `q`
                substrRegex = new RegExp(q, 'i');

                $.ajax({
                    url: "/SaleContractMaster/GetContractNumberSearchList",
                    type: "POST",
                    data: { term: q },
                    dataType: "json",
                    success: function (data) {

                        // iterate through the pool of strings and for any string that
                        // contains the substring `q`, add it to the `matches` array
                        //alert(data);
                        //console.log(data);
                        $.each(data, function (i, response) {

                            if (substrRegex.test(response.ContractNumber)) {
                                mapContractNumber[response.ContractNumber] = response;
                                matches.push(response.ContractNumber);

                            }

                        });

                    },
                    async: false
                })
                cb(matches);
            };

        };

        $("#ContractNumber").typeahead({
            hint: true,
            highlight: false,
            minLength: 1
        }, {
            source: getDataContractNumber()
        }).on("typeahead:selected", function (obj, item) {
            $("#SaleContractMasterID").val(mapContractNumber[item].ID);
            $("#ContractNumber").val(mapContractNumber[item].ContractNumber);

            //var SearchFor = $("#SearchFor").val();
            //var SearchForDisplay = $("#SearchForDisplay").val();

            //if (SearchFor == "") {
            //    $("#SearchFor").val(mapContractNumber[item].ID)
            //} else {
            //    $("#SearchFor").val(SearchFor + "," + mapContractNumber[item].ID)
            //}

            //if (SearchForDisplay == "") {
            //    $("#SearchForDisplay").val(mapContractNumber[item].ContractNumber)
            //    $("#SearchForDisplaySpan").text(mapContractNumber[item].ContractNumber)
            //} else {
            //    $("#SearchForDisplay").val(SearchForDisplay + "," + mapContractNumber[item].ContractNumber)
            //    $("#SearchForDisplaySpan").text(SearchForDisplay + "," + mapContractNumber[item].ContractNumber)
            //}
            //$('#btnContractSalaryBonusReportReset').show();
        });

        $('#ContractNumber').on("keydown", function (e) {
            if (e.keyCode == 8 || e.keyCode == 46) {

                $('#ContractNumber').typeahead('val', '');
                $("#ContractNumber").val("");
                $("#SaleContractMasterID").val("0");
            }
        });
    });
</script>



