@model AERP.ViewModel.ContractSalaryATMReportViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@*<script src="@Url.Content("~/Scripts/AERP_Scripts/Account/ContractSalaryATMReport.js")" type="text/javascript"></script>*@
<script src="@Url.Content("~/Content/Theme/vendors/bower_components/moment/min/moment.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/Theme/vendors/bower_components/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js")" type="text/javascript"></script>
<script src="~/Content/Theme/vendors/bower_components/typeahead.js/dist/typeahead.bundle.js"></script>
<div class="container" style="padding-bottom:10px;">
    @using (Html.BeginForm("Index", "ContractSalaryATMReport", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        <div class="block-header">
            <h2 style="text-transform: none;"><i class="zmdi zmdi-view-toc"></i>&nbsp;Contract Salary ATM Report</h2>
        </div>

        <div class="card" style="margin-bottom: 0px;">
            <div class="card-body card-padding">
                <div class="row">
                    <div class="col-sm-4">
                        @Html.HiddenFor(m => m.IsPosted)
                        @Html.HiddenFor(m => m.CentreName)
                        @Html.HiddenFor(m => m.BankName)
                        <div class="form-group fg-line">
                            @Html.DropDownListFor(m => m.CentreCode, Model.ListGetAdminRoleApplicableCentreItems, "------Select Centre-------", new { @class = "form-control input-sm", data_val = "true", data_toggle = "tooltip", data_placement = "top", data_original_title = "Centre List*" })
                        </div>
                        @Html.ValidationMessageFor(model => model.CentreCode)
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group fg-line select">
                            @Html.DropDownList("ReportType", ViewData["ReportType"] as List<SelectListItem>, new { @class = "form-control input-sm", data_val = "true", data_toggle = "tooltip", data_placement = "top", data_original_title = "ReportType" })
                        </div>
                        @Html.ValidationMessageFor(model => model.ReportType)
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group fg-line">
                            @Html.DropDownListFor(m => m.BankMasterID, Model.ListBankMasterItems, "---Select Bank---", new { @class = "form-control input-sm", data_val = "true", data_toggle = "tooltip", data_placement = "top", data_original_title = "Bank List*" })
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <div class="form-group fg-line select">
                            @Html.DropDownList("SalaryMonth", ViewData["SalaryMonth"] as List<SelectListItem>, new { @class = "form-control input-sm", data_val = "true", data_toggle = "tooltip", data_placement = "top", data_original_title = "Salary Month" })
                        </div>
                        @Html.ValidationMessageFor(model => model.ReportType)
                    </div>
                    <div class="col-sm-2">
                        <div class="form-group fg-line select">
                            @Html.DropDownList("SalaryYear", ViewData["SalaryYear"] as List<SelectListItem>, new { @class = "form-control input-sm", data_val = "true", data_toggle = "tooltip", data_placement = "top", data_original_title = "Salary Year" })
                        </div>
                        @Html.ValidationMessageFor(model => model.ReportType)
                    </div>
                    <div class="col-sm-3" style="display:none;">
                        <div class="form-group fg-line">
                            @Html.HiddenFor(m => m.CustomerMasterID)
                            @Html.HiddenFor(m => m.CustomerType)
                            @Html.LabelFor(model => model.CustomerMasterName, new { })
                            @Html.TextBoxFor(model => model.CustomerMasterName, new { @class = "form-control input-sm " })

                        </div>
                        @Html.ValidationMessageFor(model => model.CustomerMasterName)
                    </div>

                    <div class="col-sm-3" style="display:none;">
                        <div class="form-group fg-line">
                            @Html.HiddenFor(m => m.CustomerBranchMasterID)
                            @Html.LabelFor(model => model.CustomerBranchMasterName, new { })
                            @Html.TextBoxFor(model => model.CustomerBranchMasterName, new { @class = "form-control input-sm typeahead" })
                        </div>
                        @Html.ValidationMessageFor(model => model.CustomerBranchMasterName)
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group fg-line">
                            @Html.HiddenFor(m => m.SaleContractMasterID)
                            @Html.LabelFor(model => model.ContractNumber, new { })
                            @Html.TextBoxFor(model => model.ContractNumber, new { @class = "form-control input-sm typeahead" })
                        </div>
                        @Html.ValidationMessageFor(model => model.ContractNumber)
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group fg-line">
                            @Html.HiddenFor(m => m.IsRemovalForAdjustment)
                            <div class="checkbox">
                                <label>
                                    @if (Model.IsRemovalForAdjustment == true)
                                    {
                                        <input type="checkbox" value="" id="IsRemovalForAdjustmentDisplay" checked>
                                    }
                                    else
                                    {
                                        <input type="checkbox" value="" id="IsRemovalForAdjustmentDisplay">
                                    }
                                    <i class="input-helper"></i>
                                    @Html.LabelFor(model => model.IsRemovalForAdjustment, new { style = "" })
                                </label>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(model => model.IsRemovalForAdjustment)
                    </div>
                    <div class="col-sm-2" style="">
                        <div class="fg-line">
                            <button type="submit" name="submit" id="btnContractSalaryATMReportSubmit" class="btn-primary btn">Show</button>
                        </div>
                    </div>
                    <div class="col-sm-11">
                        <div class="form-group fg-line">
                            <input type="hidden" id="SearchFor" name="SearchFor" value="@Model.SearchFor" />
                            <input type="hidden" id="SearchForXML" name="SearchForXML" />
                            <input type="hidden" id="SearchForDisplay" name="SearchForDisplay" value="@Model.SearchForDisplay" />
                            <span id="SearchForDisplaySpan">@Model.SearchForDisplay</span>
                        </div>
                    </div>
                    <div class="col-sm-1">
                        <div class="fg-line">
                            <button type="button" name="Reset" id="btnContractSalaryATMReportReset" class="btn-primary btn" style="@(Model.SearchForDisplay != "" && Model.SearchForDisplay != null?"":"display:none;")">Reset</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<div class="container" style="margin-top:-10px">
    <div id="aaa">
        <div class="card">
            <div class="card-header"></div>
            <div class="card-body card-padding">
                @Html.Partial("/Views/Contract/Report/ContractSalaryATMReport/ContractSalaryATMReport.aspx")
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $("#btnContractSalaryATMReportSubmit").click(function () {
            debugger
            $("#IsPosted").val(true);
            $("#CentreName").val($("#CentreCode :selected").text());
            $("#BankName").val($("#BankMasterID :selected").text());
            var IsRemovalForAdjustment = $("#IsRemovalForAdjustmentDisplay").is(":checked") ? true : false;
            if (IsRemovalForAdjustment == true) {
                $("#IsRemovalForAdjustment").val(true);
            } else {
                $("#IsRemovalForAdjustment").val(false);
            }

            var SearchFor = $("#SearchFor").val();
            if (SearchFor != "") {
                var SplitSearchFor = SearchFor.split(',');
                var ParameterXML = "<rows>";
                for (var i = 0; i < SplitSearchFor.length; i++) {
                    ParameterXML = ParameterXML + "<row><SaleContractMasterID>" + SplitSearchFor[i] + "</SaleContractMasterID></row>";
                }
                if (ParameterXML.length > 6) {
                    ParameterXML = ParameterXML + "</rows>";
                } else {
                    ParameterXML = "";
                }
                $("#SearchForXML").val(ParameterXML);
            }

        });

        $("#btnContractSalaryATMReportReset").click(function () {
            $("#SearchFor").val('');
            $("#SearchForDisplay").val('')
            $("#SearchForDisplaySpan").text('');
            $(this).hide();
        });

        mapCustomerMasterName = [];
        var getDataCustomerMasterName = function () {
            return function findMatches(q, cb) {

                var matches, substringRegex;

                // an array that will be populated with substring matches
                matches = [];

                // regex used to determine if a string contains the substring `q`
                substrRegex = new RegExp(q, 'i');

                $.ajax({
                    url: "/CustomerMaster/GetCustomerMasterSearchList",
                    type: "POST",
                    data: { term: q },
                    dataType: "json",
                    success: function (data) {

                        // iterate through the pool of strings and for any string that
                        // contains the substring `q`, add it to the `matches` array
                        //alert(data);
                        //console.log(data);
                        $.each(data, function (i, response) {

                            if (substrRegex.test(response.CustomerMasterName)) {
                                mapCustomerMasterName[response.CustomerMasterName] = response;
                                matches.push(response.CustomerMasterName);

                            }

                        });

                    },
                    async: false
                })
                cb(matches);
            };

        };

        $("#CustomerMasterName").typeahead({
            hint: true,
            highlight: false,
            minLength: 1
        }, {
            source: getDataCustomerMasterName()
        }).on("typeahead:selected", function (obj, item) {
            $("#CustomerMasterID").val(mapCustomerMasterName[item].CustomerMasterID);
            $("#CustomerMasterName").val(mapCustomerMasterName[item].CustomerMasterName);
            $("#CustomerType").val(mapCustomerMasterName[item].CustomerType);

            if (mapCustomerMasterName[item].CustomerType == 1) {
                $("#CustomerBranchMasterID").val("0");
                $("#CustomerBranchMasterName").val("");
                $("#CustomerBranchMasterName").prop("disabled", true);
            } else {
                $("#CustomerBranchMasterName").prop("disabled", false);
            }

        });

        mapCustomerBranchMasterName = [];
        var getDataCustomerBranchMasterName = function () {
            return function findMatches(q, cb) {

                var matches, substringRegex;

                // an array that will be populated with substring matches
                matches = [];

                // regex used to determine if a string contains the substring `q`
                substrRegex = new RegExp(q, 'i');

                $.ajax({
                    url: "/CustomerMaster/GetCustomerBranchMasterSearchList",
                    type: "POST",
                    data: { term: q, CustomerMasterID: $("#CustomerMasterID").val() },
                    dataType: "json",
                    success: function (data) {

                        // iterate through the pool of strings and for any string that
                        // contains the substring `q`, add it to the `matches` array
                        //alert(data);
                        //console.log(data);
                        $.each(data, function (i, response) {

                            if (substrRegex.test(response.CustomerBranchMasterName)) {
                                mapCustomerBranchMasterName[response.CustomerBranchMasterName] = response;
                                matches.push(response.CustomerBranchMasterName);

                            }

                        });

                    },
                    async: false
                })
                cb(matches);
            };

        };

        $("#CustomerBranchMasterName").typeahead({
            hint: true,
            highlight: false,
            minLength: 1
        }, {
            source: getDataCustomerBranchMasterName()
        }).on("typeahead:selected", function (obj, item) {
            $("#CustomerBranchMasterID").val(mapCustomerBranchMasterName[item].CustomerBranchMasterID);
            $("#CustomerBranchMasterName").val(mapCustomerBranchMasterName[item].CustomerBranchMasterName);

            var SearchFor = $("#SearchFor").val();
            var SearchForDisplay = $("#SearchForDisplay").val();

            if (SearchFor == "") {
                $("#SearchFor").val(mapCustomerBranchMasterName[item].CustomerBranchMasterID)
            } else {
                $("#SearchFor").val(SearchFor + "," + mapCustomerBranchMasterName[item].CustomerBranchMasterID)
            }

            if (SearchForDisplay == "") {
                $("#SearchForDisplay").val(mapCustomerBranchMasterName[item].CustomerBranchMasterName)
                $("#SearchForDisplaySpan").text(mapCustomerBranchMasterName[item].CustomerBranchMasterName)
            } else {
                $("#SearchForDisplay").val(SearchForDisplay + "," + mapCustomerBranchMasterName[item].CustomerBranchMasterName)
                $("#SearchForDisplaySpan").text(SearchForDisplay + "," + mapCustomerBranchMasterName[item].CustomerBranchMasterName)
            }
            $('#btnContractSalaryATMReportReset').show();
        });

        $('#CustomerMasterName').on("keydown", function (e) {
            if (e.keyCode == 8 || e.keyCode == 46) {

                $('#CustomerMasterName').typeahead('val', '');
                $("#CustomerMasterName").val("");
                $("#CustomerMasterID").val("");
                $('#CustomerBranchMasterName').typeahead('val', '');
                $("#CustomerBranchMasterID").val("0");
                $("#CustomerBranchMasterName").val("");
            }
        });
        $('#CustomerBranchMasterName').on("keydown", function (e) {

            if ($("#CustomerMasterID").val() == "0" && e.keyCode != 9) {
                notify("Please Select Customer", "warning");
                return false;
            }
            if ($("#CustomerMasterID").val() != "0" && $("#CustomerType").val() == "1" && e.keyCode != 9) {
                return false;
            }

            if (e.keyCode == 8 || e.keyCode == 46) {

                $('#CustomerBranchMasterName').typeahead('val', '');
                $("#CustomerBranchMasterName").val("");
                $("#CustomerBranchMasterID").val("0");
            }
        });

        mapContractNumber = [];
        var getDataContractNumber = function () {
            return function findMatches(q, cb) {

                var matches, substringRegex;

                // an array that will be populated with substring matches
                matches = [];

                // regex used to determine if a string contains the substring `q`
                substrRegex = new RegExp(q, 'i');

                $.ajax({
                    url: "/SaleContractMaster/GetContractNumberSearchList",
                    type: "POST",
                    data: { term: q },
                    dataType: "json",
                    success: function (data) {

                        // iterate through the pool of strings and for any string that
                        // contains the substring `q`, add it to the `matches` array
                        //alert(data);
                        //console.log(data);
                        $.each(data, function (i, response) {

                            if (substrRegex.test(response.ContractNumber)) {
                                mapContractNumber[response.ContractNumber] = response;
                                matches.push(response.ContractNumber);

                            }

                        });

                    },
                    async: false
                })
                cb(matches);
            };

        };

        $("#ContractNumber").typeahead({
            hint: true,
            highlight: false,
            minLength: 1
        }, {
            source: getDataContractNumber()
        }).on("typeahead:selected", function (obj, item) {
            $("#SaleContractMasterID").val(mapContractNumber[item].ID);
            $("#ContractNumber").val(mapContractNumber[item].ContractNumber);
            
            var SearchFor = $("#SearchFor").val();
            var SearchForDisplay = $("#SearchForDisplay").val();

            if (SearchFor == "") {
                $("#SearchFor").val(mapContractNumber[item].ID)
            } else {
                $("#SearchFor").val(SearchFor + "," + mapContractNumber[item].ID)
            }

            if (SearchForDisplay == "") {
                $("#SearchForDisplay").val(mapContractNumber[item].ContractNumber)
                $("#SearchForDisplaySpan").text(mapContractNumber[item].ContractNumber)
            } else {
                $("#SearchForDisplay").val(SearchForDisplay + "," + mapContractNumber[item].ContractNumber)
                $("#SearchForDisplaySpan").text(SearchForDisplay + "," + mapContractNumber[item].ContractNumber)
            }
            $('#btnContractSalaryATMReportReset').show();
        });

        $('#ContractNumber').on("keydown", function (e) {
            if (e.keyCode == 8 || e.keyCode == 46) {

                $('#ContractNumber').typeahead('val', '');
                $("#ContractNumber").val("");
                $("#SaleContractMasterID").val("0");
            }
        });
    });
</script>



