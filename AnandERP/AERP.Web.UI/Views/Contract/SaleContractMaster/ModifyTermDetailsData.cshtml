@model AERP.ViewModel.SaleContractMasterViewModel
<link href="@Url.Content("~/Content/Theme/vendors/bower_components/bootstrap-select/dist/css/bootstrap-select.css")" rel="stylesheet" type="text/css" />
<div class="col-sm-12">
    @*<div class="col-sm-4">
            <div class="form-group fg-line">
                @Html.LabelFor(model => model.BillingCycleInDays, new { })
                @Html.TextBoxFor(model => model.BillingCycleInDays, new { @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.BillingCycleInDays)
        </div>*@

    <div class="col-sm-4">
        <div class="form-group fg-line">
            @Html.LabelFor(model => model.MaterialSupplyDay, new { })
            @Html.TextBoxFor(model => model.MaterialSupplyDay, new { @class = "form-control input-sm", disabled = "disabled" })
        </div>
        @Html.ValidationMessageFor(model => model.MaterialSupplyDay)
    </div>
    <div class="col-sm-4">
        <div class="form-group fg-line">
            @Html.LabelFor(model => model.RenewCallBeforeDays, new { })
            @Html.TextBoxFor(model => model.RenewCallBeforeDays, new { @class = "form-control input-sm", disabled = "disabled" })
        </div>
        @Html.ValidationMessageFor(model => model.RenewCallBeforeDays)
    </div>
    <div class="col-sm-4">
        <div class="form-group fg-line">
            @Html.LabelFor(model => model.MaterialSupplyFixAmount, new { })
            @Html.TextBoxFor(model => model.MaterialSupplyFixAmount, new { @class = "form-control input-sm", disabled = "disabled" })
        </div>
        @Html.ValidationMessageFor(model => model.MaterialSupplyFixAmount)
    </div>
</div>
<div class="col-sm-12">
    <div class="col-sm-3">
        <div class="form-group fg-line">
            @Html.LabelFor(model => model.SalaryEffectiveFromDate, new { })
            @Html.TextBoxFor(model => model.SalaryEffectiveFromDate, new { @class = "form-control input-sm", disabled = "disabled" })
        </div>
        @Html.ValidationMessageFor(model => model.SalaryEffectiveFromDate)
    </div>
    <div class="col-sm-3">
        <div class="form-group fg-line">
            @Html.LabelFor(model => model.SalaryEffectiveUptoDate, new { })
            @if (Model.TaskCode == "GeneralExtendContract")
            {
                @Html.TextBoxFor(model => model.SalaryEffectiveUptoDate, new { @class = "form-control input-sm" })
            }
            else
            {
                @Html.TextBoxFor(model => model.SalaryEffectiveUptoDate, new { @class = "form-control input-sm", disabled = "disabled" })
            }
        </div>
        @Html.ValidationMessageFor(model => model.SalaryEffectiveUptoDate)
    </div>
    <div class="col-sm-3">
        <div class="form-group fg-line">
            @Html.LabelFor(model => model.AdditionalAllowancePaidBy, new { })
            @Html.DropDownListFor(model => model.AdditionalAllowancePaidBy, (SelectList)ViewBag.AdditionalAllowancePaidByList, new { @class = "form-control input-sm", disabled = "disabled" })
        </div>
        @Html.ValidationMessageFor(model => model.AdditionalAllowancePaidBy)
    </div>
    <div class="col-sm-3">
        <div class="form-group  fg-line">
            <div class="checkbox">
                <label>
                    @if (Model.IsInclusiveServiceCharges == true)
                    {
                        <input type="checkbox" value="" id="IsInclusiveServiceCharges" checked>
                    }
                    else
                    {
                        <input type="checkbox" value="" id="IsInclusiveServiceCharges">
                    }
                    <i class="input-helper"></i>
                    @Html.LabelFor(model => model.IsInclusiveServiceCharges, new { style = "" })
                </label>
            </div>
        </div>
        @Html.ValidationMessageFor(model => model.IsInclusiveServiceCharges)
    </div>

</div>
<div class="col-sm-12">
    <div class="col-sm-3">
        <div class="form-group  fg-line">
            <div class="checkbox">
                <label>
                    @if (Model.IsServiceChargesAppliedToAddAmount == true)
                    {
                        <input type="checkbox" value="" id="IsServiceChargesAppliedToAddAmount" checked>
                    }
                    else
                    {
                        <input type="checkbox" value="" id="IsServiceChargesAppliedToAddAmount">
                    }
                    <i class="input-helper"></i>
                    @Html.LabelFor(model => model.IsServiceChargesAppliedToAddAmount, new { style = "" })
                </label>
            </div>
        </div>
        @Html.ValidationMessageFor(model => model.IsServiceChargesAppliedToAddAmount)
    </div>
    <div class="col-sm-3">
        <div class="form-group fg-line">
            <div class="checkbox">
                <label>
                    @if (Model.IsServiceChargesAppliedToServiceItem == true)
                    {
                        <input type="checkbox" value="" id="IsServiceChargesAppliedToServiceItem" checked>
                    }
                    else
                    {
                        <input type="checkbox" value="" id="IsServiceChargesAppliedToServiceItem">
                    }
                    <i class="input-helper"></i>
                    @Html.LabelFor(model => model.IsServiceChargesAppliedToServiceItem, new { style = "" })
                </label>
            </div>
        </div>
        @Html.ValidationMessageFor(model => model.IsServiceChargesAppliedToServiceItem)
    </div>
    <div class="col-sm-3">
        <div class="form-group fg-line">
            <div class="checkbox">
                <label>
                    @if (Model.IsServiceChargesAppliedToOverTime == true)
                    {
                        <input type="checkbox" value="" id="IsServiceChargesAppliedToOverTime" checked>
                    }
                    else
                    {
                        <input type="checkbox" value="" id="IsServiceChargesAppliedToOverTime">
                    }
                    <i class="input-helper"></i>
                    @Html.LabelFor(model => model.IsServiceChargesAppliedToOverTime, new { style = "" })
                </label>
            </div>
        </div>
        @Html.ValidationMessageFor(model => model.IsServiceChargesAppliedToOverTime)
    </div>
    <div class="col-sm-3">
        <div class="form-group fg-line">
            <div class="checkbox">
                <label>
                    @if (Model.IsRateFixedForRateContract == true)
                    {
                        <input type="checkbox" value="" id="IsRateFixedForRateContract" checked>
                    }
                    else
                    {
                        <input type="checkbox" value="" id="IsRateFixedForRateContract">
                    }
                    <i class="input-helper"></i>
                    @Html.LabelFor(model => model.IsRateFixedForRateContract, new { style = "" })
                </label>
            </div>
        </div>
        @Html.ValidationMessageFor(model => model.IsRateFixedForRateContract)
    </div>
</div>
<h4>Apply Service Charges</h4>
<div class="col-sm-12">
    <div class="col-sm-4">
        <div class="form-group fg-line">
            @Html.LabelFor(model => model.ServiceChargesDependOn, new { })
            @Html.DropDownListFor(model => model.ServiceChargesDependOn, (SelectList)ViewBag.ServiceChargesDependOnList, new { @class = "form-control input-sm", disabled = "disabled" })
        </div>
        @Html.ValidationMessageFor(model => model.ServiceChargesDependOn)
    </div>

</div>
@if (1 > 0)
{
    var displayPer = "";
    var displayFix = "";
    if (Model.ServiceChargesDependOn == 2)
    {
        displayPer = "display:none;";
        displayFix = "";
    }
    else
    {
        displayPer = "";
        displayFix = "display:none;";
    }

    <div class="col-sm-12" style="@displayPer" id="DataForServiceChargePercentage">
        <div class="col-sm-4">
            <div class="form-group fg-line">
                @Html.LabelFor(model => model.ServiceChargesCalculateOn, new { })
                <p id="e5_f">
                    <select id="ServiceChargeCalculateOnSalaryHeads" class="form-group selectpicker" multiple name="selectCent" disabled="disabled">
                        @*data-live-search="true"*@
                        @foreach (var item in Model.SaleContractMasterListForServiceChargeForHead)
                        {
                            <option value="@item.ReferenceID~@item.AllowanceOrDeduction~@item.ServiceChargeOnSalaryHeadsID" @item.SelectedStatusFlag>@item.CalculateOnName</option>
                        }
                    </select>
                </p>

            </div>
            @Html.ValidationMessageFor(model => model.ServiceChargesCalculateOn)
        </div>
        <div class="col-sm-4">
            <div class="form-group fg-line">
                @Html.LabelFor(model => model.ServiceChargesPercentage, new { })
                @Html.TextBoxFor(model => model.ServiceChargesPercentage, new { @class = "form-control input-sm", disabled = "disabled" })
            </div>
            @Html.ValidationMessageFor(model => model.ServiceChargesPercentage)
        </div>
    </div>
    <div class="col-sm-12" style="@displayFix" id="DataForServiceChargeFixAmount">
        <div class="col-sm-4">
            <div class="form-group fg-line">
                @Html.HiddenFor(m => m.SaleContractManPowerItemID, new { id = "ServiceChargeManPowerItemID" })
                @Html.LabelFor(model => model.SaleContractManPowerItemName, new { })
                @Html.TextBoxFor(model => model.SaleContractManPowerItemName, new { @class = "form-control input-sm", id = "ServiceChargeManPowerItemName" })
            </div>
            @Html.ValidationMessageFor(model => model.SaleContractManPowerItemName)
        </div>
        <div class="col-sm-2">
            <div class="form-group fg-line">
                @Html.LabelFor(model => model.ServiceChargesFixAmount, new { })
                @Html.TextBoxFor(model => model.ServiceChargesFixAmount, new { @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.ServiceChargesFixAmount)
        </div>
        <div class="col-sm-2" style="display:none;">
            <div class="form-group fg-line">
                @Html.LabelFor(model => model.ServiceChargesFromDate, new { })
                @Html.TextBoxFor(model => model.ServiceChargesFromDate, new { @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.ServiceChargesFromDate)
        </div>
        <div class="col-sm-2" style="display:none;">
            <div class="form-group fg-line">
                @Html.LabelFor(model => model.ServiceChargesUptoDate, new { })
                @Html.TextBoxFor(model => model.ServiceChargesUptoDate, new { @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.ServiceChargesUptoDate)
        </div>
        <div class="col-sm-2">
            <button type="button" title="Add row" class="btn bgm-cyan btn-float waves-effect waves-circle waves-float" id="btnAddServiceCharge"><i class="zmdi zmdi-plus"></i></button>
        </div>
        <table id="tblModifyServiceCharges" class="table table-striped">
            <thead>
                <tr>
                    <th>Man Power Item</th>
                    <th>Charge Amount</th>
                    <th style="display:none;">From Date</th>
                    <th style="display:none;">Upto Date</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.SaleContractMasterListForServiceCharge)
                {
                    <tr>
                        <td>
                            <input type='hidden' value='@item.SaleContractServiceChargeOnManPowerItemID' />
                            <input type='hidden' value='@item.SaleContractManPowerItemID' />@item.SaleContractManPowerItemName
                        </td>
                        <td><input type='hidden' value='@item.ServiceChargesFixAmount' />@item.ServiceChargesFixAmount</td>
                        <td style="display:none;"><input type='hidden' value='@item.ServiceChargesFromDate' />@item.ServiceChargesFromDate</td>
                        <td style="display:none;"><input type='hidden' value='@item.ServiceChargesUptoDate' />@item.ServiceChargesUptoDate</td>
                        <td>
                            @if (Model.TaskCode == "GeneralRenewContract")
                            {
                                <i class='zmdi zmdi-delete zmdi-hc-fw' style='cursor:pointer' title='Delete'></i>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
<h4>Add Over Time Details</h4>
<div class="col-sm-12">
    <div class="col-sm-4">
        <div class="form-group fg-line">
            @Html.LabelFor(model => model.OverTimeDependOn, new { })
            @Html.DropDownListFor(model => model.OverTimeDependOn, (SelectList)ViewBag.OverTimeDependOnList, new { @class = "form-control input-sm", disabled = "disabled" })
        </div>
        @Html.ValidationMessageFor(model => model.OverTimeDependOn)
    </div>
</div>
@if (1 > 0)
{
    var displayPer = "";
    var displayFix = "";
    if (Model.OverTimeDependOn == 2)
    {
        displayPer = "";
        displayFix = "display:none;";
    }
    else
    {
        displayPer = "display:none;";
        displayFix = "";
    }

    <div class="col-sm-12" style="@displayFix" id="DataForOverTimeFixAmount">
        <div class="col-sm-12">
            <div class="col-sm-4">
                <div class="form-group fg-line">
                    @Html.HiddenFor(m => m.SaleContractManPowerItemID, new { id = "OverTimeFixManPowerItemID" })
                    @Html.LabelFor(model => model.SaleContractManPowerItemName, new { })
                    @Html.TextBoxFor(model => model.SaleContractManPowerItemName, new { @class = "form-control input-sm", id = "OverTimeFixManPowerItemName" })
                </div>
                @Html.ValidationMessageFor(model => model.SaleContractManPowerItemName)
            </div>
            <div class="col-sm-4">
                <div class="form-group fg-line">
                    @Html.LabelFor(model => model.FixedAmountForInvoice, new { })
                    @Html.TextBoxFor(model => model.FixedAmountForInvoice, new { @class = "form-control input-sm" })
                </div>
                @Html.ValidationMessageFor(model => model.FixedAmountForInvoice)
            </div>
            <div class="col-sm-4">
                <div class="form-group fg-line">
                    @Html.LabelFor(model => model.FixedAmountForSalaryCompliance, new { })
                    @Html.TextBoxFor(model => model.FixedAmountForSalaryCompliance, new { @class = "form-control input-sm" })
                </div>
                @Html.ValidationMessageFor(model => model.FixedAmountForSalaryCompliance)
            </div>
            <div class="col-sm-3">
                <div class="form-group fg-line">
                    <div class="checkbox">
                        <label>
                            @if (Model.IsOverTimeDaysFix == true)
                            {
                                <input type="checkbox" value="" id="IsOverTimeDaysFix" checked>
                            }
                            else
                            {
                                <input type="checkbox" value="" id="IsOverTimeDaysFix">
                            }
                            <i class="input-helper"></i>
                            @Html.LabelFor(model => model.IsOverTimeDaysFix, new { style = "" })
                        </label>
                    </div>
                </div>
                @Html.ValidationMessageFor(model => model.IsOverTimeDaysFix)
            </div>
            <div class="col-sm-3">
                <div class="form-group fg-line">
                    @Html.LabelFor(model => model.OTFixedDays, new { })
                    @Html.TextBoxFor(model => model.OTFixedDays, new { @class = "form-control input-sm" })
                </div>
                @Html.ValidationMessageFor(model => model.OTFixedDays)
            </div>
            <div class="col-sm-3">
                <div class="form-group fg-line">
                    <div class="checkbox">
                        <label>
                            @if (Model.IsOTDaysOnTotalOff == true)
                            {
                                <input type="checkbox" value="" id="IsOTDaysOnTotalOff" checked>
                            }
                            else
                            {
                                <input type="checkbox" value="" id="IsOTDaysOnTotalOff">
                            }
                            <i class="input-helper"></i>
                            @Html.LabelFor(model => model.IsOTDaysOnTotalOff, new { style = "" })
                        </label>
                    </div>
                </div>
                @Html.ValidationMessageFor(model => model.IsOTDaysOnTotalOff)
            </div>
            <div class="col-sm-3">
                <div class="form-group fg-line">
                    <div class="checkbox">
                        <label>
                            @if (Model.IsOverTimeBillingDaysFix == true)
                            {
                                <input type="checkbox" value="" id="IsOverTimeBillingDaysFix" checked>
                            }
                            else
                            {
                                <input type="checkbox" value="" id="IsOverTimeBillingDaysFix">
                            }
                            <i class="input-helper"></i>
                            @Html.LabelFor(model => model.IsOverTimeBillingDaysFix, new { style = "" })
                        </label>
                    </div>
                </div>
                @Html.ValidationMessageFor(model => model.IsOverTimeBillingDaysFix)
            </div>
        </div>
        <div class="col-sm-12">
            <div class="col-sm-3">
                <div class="form-group fg-line">
                    @Html.LabelFor(model => model.OTBillingFixedDays, new { })
                    @Html.TextBoxFor(model => model.OTBillingFixedDays, new { @class = "form-control input-sm" })
                </div>
                @Html.ValidationMessageFor(model => model.OTBillingFixedDays)
            </div>
            <div class="col-sm-3">
                <div class="form-group fg-line">
                    <div class="checkbox">
                        <label>
                            @if (Model.IsOTBillingDaysOnTotalOff == true)
                            {
                                <input type="checkbox" value="" id="IsOTBillingDaysOnTotalOff" checked>
                            }
                            else
                            {
                                <input type="checkbox" value="" id="IsOTBillingDaysOnTotalOff">
                            }
                            <i class="input-helper"></i>
                            @Html.LabelFor(model => model.IsOTBillingDaysOnTotalOff, new { style = "" })
                        </label>
                    </div>
                </div>
                @Html.ValidationMessageFor(model => model.IsOTBillingDaysOnTotalOff)
            </div>
            <div class="col-sm-4">
                <div class="form-group fg-line">
                    @Html.LabelFor(model => model.OverTimeDisplayFormat, new { })
                    @Html.DropDownListFor(model => model.OverTimeDisplayFormat, (SelectList)ViewBag.OverTimeDisplayFormatList, new { @class = "form-control input-sm"})
                </div>
                @Html.ValidationMessageFor(model => model.OverTimeDisplayFormat)
            </div>
            <div class="col-sm-1">
                <button type="button" title="Add row" class="btn bgm-cyan btn-float waves-effect waves-circle waves-float" id="btnAddOverTimeDetailsFix"><i class="zmdi zmdi-plus"></i></button>
            </div>
        </div>
        <table id="tblModifyOverTimeDetailsFix" class="table table-striped">
            <thead>
                <tr>
                    <th>Man Power Item</th>
                    <th>Fix Amount For Invoice</th>
                    <th>Fix Amount For Salary</th>
                    <th>Is Over Time Salary Days Fix</th>
                    <th>Over Time Fixed Salary Days</th>
                    <th>Is Over Time Salary Days On Off Days</th>
                    <th>Is Over Time Billing Days Fix</th>
                    <th>Over Time Fix Billing Days</th>
                    <th>Is Over Time Billing Days On Off Days</th>
                    <th>Over Time Display Format</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.SaleContractMasterListForOverTimeFix)
                {
                    <tr>
                        <td>
                            <input type='hidden' value='@item.SaleContractOvertimeID' />
                            <input type='hidden' value='@item.SaleContractManPowerItemID' />@item.SaleContractManPowerItemName
                        </td>
                        <td><input type='hidden' value='@item.FixedAmountForInvoice' />@item.FixedAmountForInvoice</td>
                        <td><input type='hidden' value='@item.FixedAmountForSalaryCompliance' />@item.FixedAmountForSalaryCompliance</td>
                        <td><input type='hidden' value='@(item.IsOverTimeDaysFix == true ? "1" : "0")' />@(item.IsOverTimeDaysFix == true ? "Yes" : "No")</td>
                        <td><input type='hidden' value='@item.OTFixedDays' />@item.OTFixedDays</td>
                        <td><input type='hidden' value='@(item.IsOTDaysOnTotalOff== true ? "1" : "0")' />@(item.IsOTDaysOnTotalOff == true ? "Yes" : "No")</td>
                        <td><input type='hidden' value='@(item.IsOverTimeBillingDaysFix == true ? "1" : "0")' />@(item.IsOverTimeBillingDaysFix == true ? "Yes" : "No")</td>
                        <td><input type='hidden' value='@item.OTBillingFixedDays' />@item.OTBillingFixedDays</td>
                        <td><input type='hidden' value='@(item.IsOTBillingDaysOnTotalOff == true ? "1" : "0")' />@(item.IsOTBillingDaysOnTotalOff == true ? "Yes" : "No")</td>
                        <td><input type='hidden' value='@item.OverTimeDisplayFormat' />@(item.OverTimeDisplayFormat == 1 ? "Seperate" : "Include In Posting")</td>
                        <td>
                            @if (Model.TaskCode == "GeneralRenewContract")
                            {
                                <i class='zmdi zmdi-delete zmdi-hc-fw' style='cursor:pointer' title='Delete'></i>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-sm-12" style="@displayPer" id="DataForOverTimeAllowance">
        <div class="col-sm-4">
            <div class="form-group fg-line">
                @Html.HiddenFor(m => m.SaleContractManPowerItemID, new { id = "OverTimeAllowanceManPowerItemID" })
                @Html.LabelFor(model => model.SaleContractManPowerItemName, new { })
                @Html.TextBoxFor(model => model.SaleContractManPowerItemName, new { @class = "form-control input-sm", id = "OverTimeAllowanceManPowerItemName" })
            </div>
            @Html.ValidationMessageFor(model => model.SaleContractManPowerItemName)
        </div>
        <div class="col-sm-4">
            <div class="form-group fg-line">
                @Html.HiddenFor(m => m.SalaryAllowanceMasterID)
                @Html.HiddenFor(m => m.BasicOrAllowance)
                @Html.LabelFor(model => model.SalaryAllowanceMasterName, new { })
                @Html.TextBoxFor(model => model.SalaryAllowanceMasterName, new { @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.SalaryAllowanceMasterName)
        </div>
        <div class="col-sm-2">
            <div class="form-group fg-line">
                @Html.LabelFor(model => model.ForInvoiceOrSalaryCompliance, new { })
                @Html.DropDownListFor(model => model.ForInvoiceOrSalaryCompliance, (SelectList)ViewBag.ForInvoiceOrSalaryComplianceList, new { @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.ForInvoiceOrSalaryCompliance)
        </div>
        <div class="col-sm-2" style="display:none;">
            <div class="form-group fg-line">
                @Html.LabelFor(model => model.OverTimeFromDate, new { })
                @Html.TextBoxFor(model => model.OverTimeFromDate, new { @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.OverTimeFromDate)
        </div>
        <div class="col-sm-2" style="display:none;">
            <div class="form-group fg-line">
                @Html.LabelFor(model => model.OverTimeUptoDate, new { })
                @Html.TextBoxFor(model => model.OverTimeUptoDate, new { @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.OverTimeUptoDate)
        </div>
        <div class="col-sm-2">
            <button type="button" title="Add row" class="btn bgm-cyan btn-float waves-effect waves-circle waves-float" id="btnAddOverTimeDetails"><i class="zmdi zmdi-plus"></i></button>
        </div>
        <table id="tblModifyOverTimeDetails" class="table table-striped">
            <thead>
                <tr>
                    <th>Man Power Item</th>
                    <th>Allowance Master</th>
                    <th>Invoice / Salary Compliance</th>
                    <th style="display:none;">From Date</th>
                    <th style="display:none;">Upto Date</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.SaleContractMasterListForOverTime)
                {
                    <tr>
                        <td>
                            <input type='hidden' value='@item.SaleContractOvertimeSumOfID' />
                            <input type='hidden' value='@item.SaleContractManPowerItemID' />@item.SaleContractManPowerItemName
                        </td>
                        <td>
                            <input type='hidden' value='@item.SalaryAllowanceMasterID' />
                            <input type='hidden' value='@item.BasicOrAllowance' />@item.SalaryAllowanceMasterName
                        </td>
                        <td><input type='hidden' value='@item.ForInvoiceOrSalaryCompliance' />@(item.ForInvoiceOrSalaryCompliance == 1 ? "Invoice" : "Salary")</td>
                        <td style="display:none;"><input type='hidden' value='@item.OverTimeFromDate' />@item.OverTimeFromDate</td>
                        <td style="display:none;"><input type='hidden' value='@item.OverTimeUptoDate' />@item.OverTimeUptoDate</td>
                        <td>
                            @if (Model.TaskCode == "GeneralRenewContract")
                            {
                                <i class='zmdi zmdi-delete zmdi-hc-fw' style='cursor:pointer' title='Delete'></i>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
<script src="@Url.Content("~/Content/Theme/vendors/bower_components/bootstrap-select/dist/js/bootstrap-select.js")" type="text/javascript"></script>
<script>
    $(document).ready(function () {
        $('.selectpicker').selectpicker();
        SaleContractMaster.Initialize();
        $('#SalaryEffectiveFromDate').datetimepicker({
            format: 'DD MMMM YYYY',
            //minDate: moment(),
            ignoreReadonly: true,
        })
        $('#SalaryEffectiveUptoDate').datetimepicker({
            format: 'DD MMMM YYYY',
            //minDate: moment(),
            ignoreReadonly: true,
        })
        //$('#ServiceChargesFromDate').datetimepicker({
        //    format: 'DD MMMM YYYY',
        //    //minDate: moment(),
        //    ignoreReadonly: true,
        //})

        //$('#ServiceChargesUptoDate').datetimepicker({
        //    format: 'DD MMMM YYYY',
        //    //minDate: moment(),
        //    ignoreReadonly: true,
        //})

        //$('#OverTimeFromDate').datetimepicker({
        //    format: 'DD MMMM YYYY',
        //    //minDate: moment(),
        //    ignoreReadonly: true,
        //})

        //$('#OverTimeUptoDate').datetimepicker({
        //    format: 'DD MMMM YYYY',
        //    //minDate: moment(),
        //    ignoreReadonly: true,
        //})

        $("#IsOverTimeDaysFix").change(function () {
            if ($(this).is(":checked")) {
                $("#OTFixedDays").prop("disabled", false);
            } else {
                $("#OTFixedDays").val(0);
                $("#OTFixedDays").prop("disabled", true);
            }
        });

        $("#IsOverTimeBillingDaysFix").change(function () {
            if ($(this).is(":checked")) {
                $("#OTBillingFixedDays").prop("disabled", false);
            } else {
                $("#OTBillingFixedDays").val(0);
                $("#OTBillingFixedDays").prop("disabled", true);
            }
        });

        $("#ServiceChargesDependOn").on("change", function () {
            if ($(this).val() == 1) {
                $("#DataForServiceChargeFixAmount").hide();
                $("#DataForServiceChargePercentage").show();
            } else {
                $("#DataForServiceChargeFixAmount").show();
                $("#DataForServiceChargePercentage").hide();
            }
        });

        $("#OverTimeDependOn").on("change", function () {
            if ($(this).val() == 1) {
                $("#DataForOverTimeAllowance").hide();
                $("#DataForOverTimeFixAmount").show();
            } else {
                $("#DataForOverTimeAllowance").show();
                $("#DataForOverTimeFixAmount").hide();
            }
        });

        mapServiceChargeManPowerItemName = [];
        var getDataServiceChargeManPowerItemName = function () {
            return function findMatches(q, cb) {

                var matches, substringRegex;

                // an array that will be populated with substring matches
                matches = [];

                // regex used to determine if a string contains the substring `q`
                substrRegex = new RegExp(q, 'i');

                $.ajax({
                    url: "/SaleContractManPowerItem/GetSaleContractManPowerItemSearchList",
                    type: "POST",
                    data: { term: q, CustomerMasterID: $("#CustomerMasterID").val(), CustomerBranchMasterID: $("#CustomerBranchMasterID").val() },
                    dataType: "json",
                    success: function (data) {

                        // iterate through the pool of strings and for any string that
                        // contains the substring `q`, add it to the `matches` array
                        //alert(data);
                        //console.log(data);
                        $.each(data, function (i, response) {

                            if (substrRegex.test(response.SaleContractManPowerItemName)) {
                                mapServiceChargeManPowerItemName[response.SaleContractManPowerItemName] = response;
                                matches.push(response.SaleContractManPowerItemName);

                            }

                        });

                    },
                    async: false
                })
                cb(matches);
            };

        };

        $("#ServiceChargeManPowerItemName").typeahead({
            hint: true,
            highlight: false,
            minLength: 1
        }, {
            source: getDataServiceChargeManPowerItemName()
        }).on("typeahead:selected", function (obj, item) {
            $("#ServiceChargeManPowerItemID").val(mapServiceChargeManPowerItemName[item].SaleContractManPowerItemID);
            $("#ServiceChargeManPowerItemName").val(mapServiceChargeManPowerItemName[item].SaleContractManPowerItemName);
        });

        $('#ServiceChargeManPowerItemName').on("keydown", function (e) {
            if ($("#CustomerMasterID").val() == "0" || $("#CustomerMasterID").val() == "") {
                notify("Please select Customer.", "warning");
                return false;
            }
            if ($("#CustomerType").val() == "2" && ($("#CustomerBranchMasterID").val() == "" || $("#CustomerBranchMasterID").val() == "0")) {
                notify("Please select Branch.", "warning");
                return false;
            }
            if (e.keyCode == 8 || e.keyCode == 46) {
                $('#ServiceChargeManPowerItemName').typeahead('val', '');
                $("#ServiceChargeManPowerItemName").val("");
                $("#ServiceChargeManPowerItemID").val("");
            }
        });

        $("#tblModifyServiceCharges tbody").unbind("click").on("click", "tr td i", function () {
            $(this).closest('tr').remove();
        });

        $('#btnAddServiceCharge').on("click", function () {
            if ($('#ServiceChargeManPowerItemName').val() == "" && ($('#ServiceChargeManPowerItemID').val() == "0" || $('#ServiceChargeManPowerItemID').val() == "")) {
                notify("Please Select Post.", "warning");
                return false;
            }
            if ($('#ServiceChargesFixAmount').val() == "" || $('#ServiceChargesFixAmount').val() == 0) {
                notify("Please Enter Fix Service Charge Amount.", "warning");
                return false;
            }
            //if ($('#ServiceChargesFromDate').val() == "") {
            //    notify("Please Select From Date.", "warning");
            //    return false;
            //}
            //if ($('#ServiceChargesUptoDate').val() == "") {
            //    notify("Please Enter Upto Date.", "warning");
            //    return false;
            //}
            // alert($('#AttributeName :selected').val())

            var DataArray = [];
            var data = $('#tblModifyServiceCharges tbody tr td  input').each(function () {
                DataArray.push($(this).val());
            });
            var TotalRecord = DataArray.length;

            for (var i = 0; i < TotalRecord; i = i + 5) {
                if (DataArray[i+1] == $('#ServiceChargeManPowerItemID').val()) {
                    notify("You Cannot Enter the Same Post.", "warning");
                    $("#ServiceChargeManPowerItemName").typeahead('val', '');
                    $("#ServiceChargeManPowerItemName").val("");
                    $("#ServiceChargeManPowerItemID").val("");
                    $('#ServiceChargesFixAmount').val('');
                    return false;
                }
            }
            $("#tblModifyServiceCharges tbody").append(
                                                   "<tr>" +
                                                    "<td><input type='hidden' value='0'  /><input type='hidden' value='" + $("#ServiceChargeManPowerItemID").val() + "'  />" + $('#ServiceChargeManPowerItemName').val() + "</td>" +
                                                    "<td><input type='hidden' value='" + $('#ServiceChargesFixAmount').val() + "' />" + $('#ServiceChargesFixAmount').val() + "</td>" +
                                                     "<td style='display:none;'><input type='hidden' value='" + $('#ServiceChargesFromDate').val() + "' />" + $('#ServiceChargesFromDate').val() + "</td>" +
                                                     "<td style='display:none;'><input type='hidden' value='" + $('#ServiceChargesUptoDate').val() + "' />" + $('#ServiceChargesUptoDate').val() + "</td>" +
                                                     "<td> <i class='zmdi zmdi-delete zmdi-hc-fw' style='cursor:pointer' title = 'Delete'></td>" +
                                                   "</tr>"
                                                  );

            $("#tblModifyServiceCharges tbody").unbind("click").on("click", "tr td i", function () {
                $(this).closest('tr').remove();
            });

            $("#ServiceChargeManPowerItemName").typeahead('val', '');
            $("#ServiceChargeManPowerItemName").val("");
            $("#ServiceChargeManPowerItemID").val("");
            $('#ServiceChargesFixAmount').val('');
            $('#ServiceChargesFromDate').val('');
            $('#ServiceChargesUptoDate').val('');
        });

        mapOverTimeFixManPowerItemName = [];
        var getDataOverTimeFixManPowerItemName = function () {
            return function findMatches(q, cb) {

                var matches, substringRegex;

                // an array that will be populated with substring matches
                matches = [];

                // regex used to determine if a string contains the substring `q`
                substrRegex = new RegExp(q, 'i');

                $.ajax({
                    url: "/SaleContractManPowerItem/GetSaleContractManPowerItemSearchList",
                    type: "POST",
                    data: { term: q, CustomerMasterID: $("#CustomerMasterID").val(), CustomerBranchMasterID: $("#CustomerBranchMasterID").val() },
                    dataType: "json",
                    success: function (data) {

                        // iterate through the pool of strings and for any string that
                        // contains the substring `q`, add it to the `matches` array
                        //alert(data);
                        //console.log(data);
                        $.each(data, function (i, response) {

                            if (substrRegex.test(response.SaleContractManPowerItemName)) {
                                mapOverTimeFixManPowerItemName[response.SaleContractManPowerItemName] = response;
                                matches.push(response.SaleContractManPowerItemName);

                            }

                        });

                    },
                    async: false
                })
                cb(matches);
            };

        };

        $("#OverTimeFixManPowerItemName").typeahead({
            hint: true,
            highlight: false,
            minLength: 1
        }, {
            source: getDataOverTimeFixManPowerItemName()
        }).on("typeahead:selected", function (obj, item) {
            $("#OverTimeFixManPowerItemID").val(mapOverTimeFixManPowerItemName[item].SaleContractManPowerItemID);
            $("#OverTimeFixManPowerItemName").val(mapOverTimeFixManPowerItemName[item].SaleContractManPowerItemName);
        });

        $('#OverTimeFixManPowerItemName').on("keydown", function (e) {
            if ($("#CustomerMasterID").val() == "0" || $("#CustomerMasterID").val() == "") {
                notify("Please select Customer.", "warning");
                return false;
            }
            if ($("#CustomerType").val() == "2" && ($("#CustomerBranchMasterID").val() == "" || $("#CustomerBranchMasterID").val() == "0")) {
                notify("Please select Branch.", "warning");
                return false;
            }
            if (e.keyCode == 8 || e.keyCode == 46) {
                $('#OverTimeFixManPowerItemName').typeahead('val', '');
                $("#OverTimeFixManPowerItemName").val("");
                $("#OverTimeFixManPowerItemID").val("");
            }
        });

        $("#tblModifyOverTimeDetailsFix tbody").unbind("click").on("click", "tr td i", function () {
            $(this).closest('tr').remove();
        });

        $('#btnAddOverTimeDetailsFix').on("click", function () {
            if ($('#OverTimeFixManPowerItemName').val() == "" && ($('#OverTimeFixManPowerItemID').val() == "0" || $('#OverTimeFixManPowerItemID').val() == "")) {
                notify("Please Select Man Power Item.", "warning");
                return false;
            }
            if (($('#FixedAmountForInvoice').val() == "" || $('#FixedAmountForInvoice').val() == "0") && ($('#FixedAmountForSalaryCompliance').val() == "" || $('#FixedAmountForSalaryCompliance').val() == "0")) {
                notify("Please Enter Fix Amount For Either Invoice or Salary Compliance.", "warning");
                return false;
            }
            if ($('#IsOverTimeDaysFix').is(":checked") && ($('#OTFixedDays').val() == "" || $('#OTFixedDays').val() == "0")) {
                notify("Please Enter Fix days.", "warning");
                return false;
            }
            if ($('#IsOverTimeBillingDaysFix').is(":checked") && ($('#OTBillingFixedDays').val() == "" || $('#OTBillingFixedDays').val() == "0")) {
                notify("Please Enter Salary Fix days.", "warning");
                return false;
            }
            //if () {
            //    notify("Please Enter Fix Amount For Salary Compliance.", "warning");
            //    return false;
            //}
            // alert($('#AttributeName :selected').val())

            var DataArray = [];
            var data = $('#tblModifyOverTimeDetailsFix tbody tr td  input').each(function () {
                DataArray.push($(this).val());
            });
            var TotalRecord = DataArray.length;

            for (var i = 0; i < TotalRecord; i = i + 11) {
                if (DataArray[i + 1] == $('#OverTimeFixManPowerItemID').val()) {
                    notify("You Cannot Enter the Same Post.", "warning");
                    $("#OverTimeFixManPowerItemName").typeahead('val', '');
                    $("#OverTimeFixManPowerItemName").val("");
                    $("#OverTimeFixManPowerItemID").val("");
                    $("#FixedAmountForInvoice").val("");
                    $("#FixedAmountForSalaryCompliance").val("");
                    $('#IsOverTimeDaysFix').prop('checked', false);
                    $('#OTFixedDays').val(0);
                    $('#OTFixedDays').prop('disabled', true);
                    $('#IsOTDaysOnTotalOff').prop('checked', false);
                    $('#IsOverTimeBillingDaysFix').prop('checked', false);
                    $('#OTBillingFixedDays').val(0);
                    $('#OTBillingFixedDays').prop('disabled', true);
                    $('#IsOTBillingDaysOnTotalOff').prop('checked', false);
                    $('#OverTimeDisplayFormat').val(1);
                    return false;
                }
            }
            $("#tblModifyOverTimeDetailsFix tbody").append(
                                                   "<tr>" +
                                                    "<td><input type='hidden' value='0'  /><input type='hidden' value='" + $("#OverTimeFixManPowerItemID").val() + "'  />" + $('#OverTimeFixManPowerItemName').val() + "</td>" +
                                                    "<td><input type='hidden' value='" + $('#FixedAmountForInvoice').val() + "' />" + $('#FixedAmountForInvoice').val() + "</td>" +
                                                     "<td><input type='hidden' value='" + $('#FixedAmountForSalaryCompliance').val() + "' />" + $('#FixedAmountForSalaryCompliance').val() + "</td>" +
                                                     "<td><input type='hidden' value='" + ($('#IsOverTimeDaysFix').is(":checked") ? true : false) + "' />" + ($('#IsOverTimeDaysFix').is(":checked") ? "Yes" : "No") + "</td>" +
                                                       "<td><input type='hidden' value='" + $('#OTFixedDays').val() + "' />" + $('#OTFixedDays').val() + "</td>" +
                                                        "<td><input type='hidden' value='" + ($('#IsOTDaysOnTotalOff').is(":checked") ? true : false) + "' />" + ($('#IsOTDaysOnTotalOff').is(":checked") ? "Yes" : "No") + "</td>" +
                                                       "<td><input type='hidden' value='" + ($('#IsOverTimeBillingDaysFix').is(":checked") ? true : false) + "' />" + ($('#IsOverTimeBillingDaysFix').is(":checked") ? "Yes" : "No") + "</td>" +
                                                       "<td><input type='hidden' value='" + $('#OTBillingFixedDays').val() + "' />" + $('#OTBillingFixedDays').val() + "</td>" +
                                                       "<td><input type='hidden' value='" + ($('#IsOTBillingDaysOnTotalOff').is(":checked") ? true : false) + "' />" + ($('#IsOTBillingDaysOnTotalOff').is(":checked") ? "Yes" : "No") + "</td>" +
                                                       "<td><input type='hidden' value='" + $('#OverTimeDisplayFormat').val() + "' />" + $('#OverTimeDisplayFormat :selected').text() + "</td>" +
                                                     "<td> <i class='zmdi zmdi-delete zmdi-hc-fw' style='cursor:pointer' title = 'Delete'></td>" +
                                                   "</tr>"
                                                  );

            $("#tblModifyOverTimeDetailsFix tbody").unbind("click").on("click", "tr td i", function () {
                $(this).closest('tr').remove();
            });

            $("#OverTimeFixManPowerItemName").typeahead('val', '');
            $("#OverTimeFixManPowerItemName").val("");
            $("#OverTimeFixManPowerItemID").val("");
            $("#FixedAmountForInvoice").val("");
            $("#FixedAmountForSalaryCompliance").val("");
            $('#IsOverTimeDaysFix').prop('checked', false);
            $('#OTFixedDays').val(0);
            $('#OTFixedDays').prop('disabled', true);
            $('#IsOTDaysOnTotalOff').prop('checked', false);
            $('#IsOverTimeBillingDaysFix').prop('checked', false);
            $('#OTBillingFixedDays').val(0);
            $('#OTBillingFixedDays').prop('disabled', true);
            $('#IsOTBillingDaysOnTotalOff').prop('checked', false);
            $('#OverTimeDisplayFormat').val(1);
        });

        mapOverTimeAllowanceManPowerItemName = [];
        var getDataOverTimeAllowanceManPowerItemName = function () {
            return function findMatches(q, cb) {

                var matches, substringRegex;

                // an array that will be populated with substring matches
                matches = [];

                // regex used to determine if a string contains the substring `q`
                substrRegex = new RegExp(q, 'i');

                $.ajax({
                    url: "/SaleContractManPowerItem/GetSaleContractManPowerItemSearchList",
                    type: "POST",
                    data: { term: q, CustomerMasterID: $("#CustomerMasterID").val(), CustomerBranchMasterID: $("#CustomerBranchMasterID").val() },
                    dataType: "json",
                    success: function (data) {

                        // iterate through the pool of strings and for any string that
                        // contains the substring `q`, add it to the `matches` array
                        //alert(data);
                        //console.log(data);
                        $.each(data, function (i, response) {

                            if (substrRegex.test(response.SaleContractManPowerItemName)) {
                                mapOverTimeAllowanceManPowerItemName[response.SaleContractManPowerItemName] = response;
                                matches.push(response.SaleContractManPowerItemName);

                            }

                        });

                    },
                    async: false
                })
                cb(matches);
            };

        };

        $("#OverTimeAllowanceManPowerItemName").typeahead({
            hint: true,
            highlight: false,
            minLength: 1
        }, {
            source: getDataOverTimeAllowanceManPowerItemName()
        }).on("typeahead:selected", function (obj, item) {
            $("#OverTimeAllowanceManPowerItemID").val(mapOverTimeAllowanceManPowerItemName[item].SaleContractManPowerItemID);
            $("#OverTimeAllowanceManPowerItemName").val(mapOverTimeAllowanceManPowerItemName[item].SaleContractManPowerItemName);
        });

        $('#OverTimeAllowanceManPowerItemName').on("keydown", function (e) {
            if ($("#CustomerMasterID").val() == "0" || $("#CustomerMasterID").val() == "") {
                notify("Please select Customer.", "warning");
                return false;
            }
            if ($("#CustomerType").val() == "2" && ($("#CustomerBranchMasterID").val() == "" || $("#CustomerBranchMasterID").val() == "0")) {
                notify("Please select Branch.", "warning");
                return false;
            }
            if (e.keyCode == 8 || e.keyCode == 46) {
                $('#OverTimeAllowanceManPowerItemName').typeahead('val', '');
                $("#OverTimeAllowanceManPowerItemName").val("");
                $("#OverTimeAllowanceManPowerItemID").val("");
            }
        });

        mapSalaryAllowanceMasterName = [];
        var getDataSalaryAllowanceMasterName = function () {
            return function findMatches(q, cb) {

                var matches, substringRegex;

                // an array that will be populated with substring matches
                matches = [];

                // regex used to determine if a string contains the substring `q`
                substrRegex = new RegExp(q, 'i');

                $.ajax({
                    url: "/SaleContractManPowerItem/GetSaleContractManPowerItemAllowancesSearchList",
                    type: "POST",
                    data: { term: q, CustomerMasterID: $("#CustomerMasterID").val(), CustomerBranchMasterID: $("#CustomerBranchMasterID").val() },
                    dataType: "json",
                    success: function (data) {

                        // iterate through the pool of strings and for any string that
                        // contains the substring `q`, add it to the `matches` array
                        //alert(data);
                        //console.log(data);
                        $.each(data, function (i, response) {

                            if (substrRegex.test(response.SalaryAllowanceMasterName)) {
                                mapSalaryAllowanceMasterName[response.SalaryAllowanceMasterName] = response;
                                matches.push(response.SalaryAllowanceMasterName);

                            }

                        });

                    },
                    async: false
                })
                cb(matches);
            };

        };

        $("#SalaryAllowanceMasterName").typeahead({
            hint: true,
            highlight: false,
            minLength: 1
        }, {
            source: getDataSalaryAllowanceMasterName()
        }).on("typeahead:selected", function (obj, item) {
            $("#SalaryAllowanceMasterID").val(mapSalaryAllowanceMasterName[item].SalaryAllowanceMasterID);
            $("#SalaryAllowanceMasterName").val(mapSalaryAllowanceMasterName[item].SalaryAllowanceMasterName);
            $("#BasicOrAllowance").val(mapSalaryAllowanceMasterName[item].BasicOrAllowance);
        });

        $('#SalaryAllowanceMasterName').on("keydown", function (e) {
            if ($("#CustomerMasterID").val() == "0" || $("#CustomerMasterID").val() == "") {
                notify("Please select Customer.", "warning");
                return false;
            }
            if ($("#CustomerType").val() == "2" && ($("#CustomerBranchMasterID").val() == "" || $("#CustomerBranchMasterID").val() == "0")) {
                notify("Please select Branch.", "warning");
                return false;
            }
            if (e.keyCode == 8 || e.keyCode == 46) {
                $('#SalaryAllowanceMasterName').typeahead('val', '');
                $("#SalaryAllowanceMasterName").val("");
                $("#SalaryAllowanceMasterID").val("");
            }
        });

        $("#tblModifyOverTimeDetails tbody").unbind("click").on("click", "tr td i", function () {
            $(this).closest('tr').remove();
        });

        $('#btnAddOverTimeDetails').on("click", function () {
            if ($('#SalaryAllowanceMasterName').val() == "" && ($('#SalaryAllowanceMasterID').val() == "0" || $('#SalaryAllowanceMasterID').val() == "")) {
                notify("Please Select Allowance Master.", "warning");
                return false;
            }
            if ($('#OverTimeAllowanceManPowerItemName').val() == "" && ($('#OverTimeAllowanceManPowerItemID').val() == "0" || $('#OverTimeAllowanceManPowerItemID').val() == "")) {
                notify("Please Select Man Power Item.", "warning");
                return false;
            }
            // alert($('#AttributeName :selected').val())

            var DataArray = [];
            var data = $('#tblModifyOverTimeDetails tbody tr td  input').each(function () {
                DataArray.push($(this).val());
            });
            var TotalRecord = DataArray.length;

            for (var i = 0; i < TotalRecord; i = i + 7) {
                if (DataArray[i + 1] == $('#OverTimeAllowanceManPowerItemID').val() && DataArray[i + 2] == $('#SalaryAllowanceMasterID').val() && DataArray[i + 4] == $('#ForInvoiceOrSalaryCompliance').val()) {
                    notify("You Cannot Enter the Same Allowance for Same Type.", "warning");
                    $("#SalaryAllowanceMasterName").typeahead('val', '');
                    $("#SalaryAllowanceMasterName").val("");
                    $("#SalaryAllowanceMasterID").val("");
                    $('#OverTimeAllowanceManPowerItemName').typeahead('val', '');
                    $("#OverTimeAllowanceManPowerItemName").val("");
                    $("#OverTimeAllowanceManPowerItemID").val("");
                    $("#BasicOrAllowance").val("");
                    return false;
                }
            }
            $("#tblModifyOverTimeDetails tbody").append(
                                                   "<tr>" +
                                                    "<td><input type='hidden' value='0'  /><input type='hidden' value='" + $("#OverTimeAllowanceManPowerItemID").val() + "'  />" + $('#OverTimeAllowanceManPowerItemName').val() + "</td>" +
                                                    "<td><input type='hidden' value='" + $("#SalaryAllowanceMasterID").val() + "'  /><input type='hidden' value='" + $("#BasicOrAllowance").val() + "'  />" + $('#SalaryAllowanceMasterName').val() + "</td>" +
                                                    "<td><input type='hidden' value='" + $('#ForInvoiceOrSalaryCompliance').val() + "' />" + $('#ForInvoiceOrSalaryCompliance :selected').text() + "</td>" +
                                                     "<td style='display:none;'><input type='hidden' value='" + $('#OverTimeFromDate').val() + "' />" + $('#OverTimeFromDate').val() + "</td>" +
                                                     "<td style='display:none;'><input type='hidden' value='" + $('#OverTimeUptoDate').val() + "' />" + $('#OverTimeUptoDate').val() + "</td>" +
                                                     "<td> <i class='zmdi zmdi-delete zmdi-hc-fw' style='cursor:pointer' title = 'Delete'></td>" +
                                                   "</tr>"
                                                  );

            $("#tblModifyOverTimeDetails tbody").unbind("click").on("click", "tr td i", function () {
                $(this).closest('tr').remove();
            });

            $("#SalaryAllowanceMasterName").typeahead('val', '');
            $("#SalaryAllowanceMasterName").val("");
            $("#SalaryAllowanceMasterID").val("");
            $('#OverTimeAllowanceManPowerItemName').typeahead('val', '');
            $("#OverTimeAllowanceManPowerItemName").val("");
            $("#OverTimeAllowanceManPowerItemID").val("");
            $("#BasicOrAllowance").val("");
        });
    })
</script>